// Generated from /Users/ali/CDQLParserV3/Cdql.g4 by ANTLR 4.6
// jshint ignore: start
var antlr4 = require('antlr4/index');
var CdqlListener = require('./CdqlListener').CdqlListener;
var CdqlVisitor = require('./CdqlVisitor').CdqlVisitor;

var grammarFileName = "Cdql.g4";

var serializedATN = ["\u0003\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\u0003X\u0369\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004",
    "O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004U\tU\u0004",
    "V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004\\\t\\\u0004",
    "]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004c\tc\u0004",
    "d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004j\tj\u0003",
    "\u0002\u0005\u0002\u00d6\n\u0002\u0003\u0002\u0003\u0002\u0005\u0002",
    "\u00da\n\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u00e3\n\u0003\u0003\u0004",
    "\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005",
    "\u00eb\n\u0005\u0005\u0005\u00ed\n\u0005\u0003\u0005\u0003\u0005\u0005",
    "\u0005\u00f1\n\u0005\u0003\u0005\u0005\u0005\u00f4\n\u0005\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0005\u0006\u00f9\n\u0006\u0003\u0006\u0005",
    "\u0006\u00fc\n\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\b\u0003\b\u0003\b\u0003\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0003\r\u0003\r\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0007\u0012\u012a\n",
    "\u0012\f\u0012\u000e\u0012\u012d\u000b\u0012\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u013a\n\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u013f\n\u0015\u0007\u0015",
    "\u0141\n\u0015\f\u0015\u000e\u0015\u0144\u000b\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0005",
    "\u0016\u014d\n\u0016\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0007\u0018\u0154\n\u0018\f\u0018\u000e\u0018\u0157\u000b",
    "\u0018\u0003\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0007\u001b\u0162\n\u001b",
    "\f\u001b\u000e\u001b\u0165\u000b\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001c\u0003\u001c\u0007\u001c\u016c\n\u001c\f\u001c\u000e",
    "\u001c\u016f\u000b\u001c\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e",
    "\u0005\u001e\u0175\n\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003 \u0003 \u0003 \u0005 \u017e\n \u0003!\u0003!\u0003!\u0003",
    "!\u0005!\u0184\n!\u0003\"\u0003\"\u0003\"\u0005\"\u0189\n\"\u0003#\u0003",
    "#\u0003#\u0003$\u0003$\u0003$\u0003$\u0003$\u0003$\u0005$\u0194\n$\u0003",
    "$\u0003$\u0005$\u0198\n$\u0003%\u0003%\u0005%\u019c\n%\u0003&\u0003",
    "&\u0003&\u0003&\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0005",
    "\'\u01a8\n\'\u0003(\u0003(\u0005(\u01ac\n(\u0003)\u0003)\u0003)\u0003",
    ")\u0003)\u0003)\u0003*\u0003*\u0003*\u0003*\u0003*\u0005*\u01b9\n*\u0003",
    "*\u0005*\u01bc\n*\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003",
    "+\u0005+\u01c6\n+\u0003+\u0003+\u0003+\u0003+\u0007+\u01cc\n+\f+\u000e",
    "+\u01cf\u000b+\u0003,\u0003,\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0005-\u01e1",
    "\n-\u0003.\u0003.\u0003/\u0003/\u00030\u00030\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00051\u01f1\n1\u00032\u00032\u00033\u0003",
    "3\u00033\u00033\u00033\u00033\u00033\u00053\u01fc\n3\u00034\u00034\u0003",
    "4\u00054\u0201\n4\u00035\u00035\u00035\u00036\u00036\u00056\u0208\n",
    "6\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00038\u00038\u0003",
    "8\u00038\u00038\u00058\u0216\n8\u00039\u00039\u00039\u00039\u0003:\u0003",
    ":\u0003:\u0003:\u0003;\u0003;\u0003<\u0003<\u0003<\u0003<\u0005<\u0226",
    "\n<\u0003=\u0003=\u0003=\u0007=\u022b\n=\f=\u000e=\u022e\u000b=\u0003",
    ">\u0003>\u0003>\u0003>\u0003>\u0003>\u0005>\u0236\n>\u0003?\u0003?\u0005",
    "?\u023a\n?\u0003?\u0003?\u0003?\u0005?\u023f\n?\u0003@\u0003@\u0003",
    "@\u0007@\u0244\n@\f@\u000e@\u0247\u000b@\u0003A\u0003A\u0005A\u024b",
    "\nA\u0003B\u0003B\u0003B\u0003B\u0003C\u0003C\u0003C\u0003C\u0003C\u0003",
    "D\u0003D\u0003D\u0003D\u0007D\u025a\nD\fD\u000eD\u025d\u000bD\u0003",
    "E\u0003E\u0003E\u0003E\u0003F\u0003F\u0003F\u0003F\u0007F\u0267\nF\f",
    "F\u000eF\u026a\u000bF\u0003F\u0003F\u0003G\u0003G\u0003G\u0003G\u0003",
    "G\u0003G\u0007G\u0274\nG\fG\u000eG\u0277\u000bG\u0003G\u0003G\u0003",
    "H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003I\u0003I\u0003I\u0003I\u0003",
    "I\u0006I\u0286\nI\rI\u000eI\u0287\u0003I\u0003I\u0005I\u028c\nI\u0003",
    "J\u0003J\u0003J\u0007J\u0291\nJ\fJ\u000eJ\u0294\u000bJ\u0003K\u0003",
    "K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0005K\u029e\nK\u0003L\u0003",
    "L\u0003L\u0003L\u0003M\u0003M\u0003M\u0003M\u0003M\u0003M\u0007M\u02aa",
    "\nM\fM\u000eM\u02ad\u000bM\u0003M\u0003M\u0003N\u0003N\u0003N\u0003",
    "N\u0003N\u0003N\u0003N\u0003N\u0003N\u0005N\u02ba\nN\u0003N\u0003N\u0003",
    "O\u0003O\u0003O\u0003O\u0003P\u0003P\u0003P\u0003P\u0003P\u0005P\u02c7",
    "\nP\u0003Q\u0003Q\u0003Q\u0003Q\u0007Q\u02cd\nQ\fQ\u000eQ\u02d0\u000b",
    "Q\u0003Q\u0003Q\u0003R\u0003R\u0003S\u0003S\u0003S\u0003S\u0005S\u02da",
    "\nS\u0003T\u0003T\u0003T\u0003T\u0003U\u0003U\u0003U\u0003U\u0003V\u0003",
    "V\u0003V\u0003V\u0003W\u0003W\u0003W\u0003W\u0003X\u0003X\u0003X\u0003",
    "X\u0003Y\u0003Y\u0003Z\u0003Z\u0003[\u0003[\u0003[\u0003[\u0003[\u0005",
    "[\u02f9\n[\u0003[\u0003[\u0005[\u02fd\n[\u0003[\u0003[\u0005[\u0301",
    "\n[\u0003\\\u0003\\\u0003]\u0003]\u0005]\u0307\n]\u0003^\u0003^\u0003",
    "^\u0007^\u030c\n^\f^\u000e^\u030f\u000b^\u0003_\u0003_\u0003_\u0003",
    "_\u0003_\u0003_\u0003_\u0003_\u0003`\u0003`\u0003`\u0007`\u031c\n`\f",
    "`\u000e`\u031f\u000b`\u0003a\u0003a\u0003a\u0005a\u0324\na\u0003b\u0003",
    "b\u0003c\u0003c\u0005c\u032a\nc\u0003c\u0003c\u0003c\u0005c\u032f\n",
    "c\u0007c\u0331\nc\fc\u000ec\u0334\u000bc\u0003d\u0003d\u0003e\u0003",
    "e\u0003e\u0003e\u0003f\u0003f\u0003g\u0003g\u0003g\u0003g\u0007g\u0342",
    "\ng\fg\u000eg\u0345\u000bg\u0003g\u0003g\u0003g\u0003g\u0005g\u034b",
    "\ng\u0003h\u0003h\u0003h\u0003h\u0003i\u0003i\u0003i\u0003i\u0007i\u0355",
    "\ni\fi\u000ei\u0358\u000bi\u0003i\u0003i\u0003i\u0003i\u0005i\u035e",
    "\ni\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0005j\u0367\n",
    "j\u0003j\u0003\u0356\u0003Tk\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012",
    "\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ",
    "\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e",
    "\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6",
    "\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be",
    "\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u0002\u0005",
    "\u0003\u0002/2\u0004\u0002457<\u0004\u0002QQWX\u0359\u0002\u00d5\u0003",
    "\u0002\u0002\u0002\u0004\u00e2\u0003\u0002\u0002\u0002\u0006\u00e4\u0003",
    "\u0002\u0002\u0002\b\u00ec\u0003\u0002\u0002\u0002\n\u00f5\u0003\u0002",
    "\u0002\u0002\f\u00fd\u0003\u0002\u0002\u0002\u000e\u0101\u0003\u0002",
    "\u0002\u0002\u0010\u0105\u0003\u0002\u0002\u0002\u0012\u010c\u0003\u0002",
    "\u0002\u0002\u0014\u010e\u0003\u0002\u0002\u0002\u0016\u0112\u0003\u0002",
    "\u0002\u0002\u0018\u0116\u0003\u0002\u0002\u0002\u001a\u0118\u0003\u0002",
    "\u0002\u0002\u001c\u011b\u0003\u0002\u0002\u0002\u001e\u011e\u0003\u0002",
    "\u0002\u0002 \u0122\u0003\u0002\u0002\u0002\"\u0126\u0003\u0002\u0002",
    "\u0002$\u012e\u0003\u0002\u0002\u0002&\u0133\u0003\u0002\u0002\u0002",
    "(\u0136\u0003\u0002\u0002\u0002*\u014c\u0003\u0002\u0002\u0002,\u014e",
    "\u0003\u0002\u0002\u0002.\u0150\u0003\u0002\u0002\u00020\u0158\u0003",
    "\u0002\u0002\u00022\u015a\u0003\u0002\u0002\u00024\u015c\u0003\u0002",
    "\u0002\u00026\u016d\u0003\u0002\u0002\u00028\u0170\u0003\u0002\u0002",
    "\u0002:\u0174\u0003\u0002\u0002\u0002<\u0176\u0003\u0002\u0002\u0002",
    ">\u017a\u0003\u0002\u0002\u0002@\u0183\u0003\u0002\u0002\u0002B\u0188",
    "\u0003\u0002\u0002\u0002D\u018a\u0003\u0002\u0002\u0002F\u0197\u0003",
    "\u0002\u0002\u0002H\u019b\u0003\u0002\u0002\u0002J\u019d\u0003\u0002",
    "\u0002\u0002L\u01a7\u0003\u0002\u0002\u0002N\u01a9\u0003\u0002\u0002",
    "\u0002P\u01ad\u0003\u0002\u0002\u0002R\u01b3\u0003\u0002\u0002\u0002",
    "T\u01c5\u0003\u0002\u0002\u0002V\u01d0\u0003\u0002\u0002\u0002X\u01e0",
    "\u0003\u0002\u0002\u0002Z\u01e2\u0003\u0002\u0002\u0002\\\u01e4\u0003",
    "\u0002\u0002\u0002^\u01e6\u0003\u0002\u0002\u0002`\u01f0\u0003\u0002",
    "\u0002\u0002b\u01f2\u0003\u0002\u0002\u0002d\u01fb\u0003\u0002\u0002",
    "\u0002f\u0200\u0003\u0002\u0002\u0002h\u0202\u0003\u0002\u0002\u0002",
    "j\u0207\u0003\u0002\u0002\u0002l\u0209\u0003\u0002\u0002\u0002n\u0210",
    "\u0003\u0002\u0002\u0002p\u0217\u0003\u0002\u0002\u0002r\u021b\u0003",
    "\u0002\u0002\u0002t\u021f\u0003\u0002\u0002\u0002v\u0221\u0003\u0002",
    "\u0002\u0002x\u0227\u0003\u0002\u0002\u0002z\u022f\u0003\u0002\u0002",
    "\u0002|\u0239\u0003\u0002\u0002\u0002~\u0240\u0003\u0002\u0002\u0002",
    "\u0080\u024a\u0003\u0002\u0002\u0002\u0082\u024c\u0003\u0002\u0002\u0002",
    "\u0084\u0250\u0003\u0002\u0002\u0002\u0086\u0255\u0003\u0002\u0002\u0002",
    "\u0088\u025e\u0003\u0002\u0002\u0002\u008a\u0262\u0003\u0002\u0002\u0002",
    "\u008c\u026d\u0003\u0002\u0002\u0002\u008e\u027a\u0003\u0002\u0002\u0002",
    "\u0090\u028b\u0003\u0002\u0002\u0002\u0092\u028d\u0003\u0002\u0002\u0002",
    "\u0094\u029d\u0003\u0002\u0002\u0002\u0096\u029f\u0003\u0002\u0002\u0002",
    "\u0098\u02a3\u0003\u0002\u0002\u0002\u009a\u02b0\u0003\u0002\u0002\u0002",
    "\u009c\u02bd\u0003\u0002\u0002\u0002\u009e\u02c1\u0003\u0002\u0002\u0002",
    "\u00a0\u02c8\u0003\u0002\u0002\u0002\u00a2\u02d3\u0003\u0002\u0002\u0002",
    "\u00a4\u02d9\u0003\u0002\u0002\u0002\u00a6\u02db\u0003\u0002\u0002\u0002",
    "\u00a8\u02df\u0003\u0002\u0002\u0002\u00aa\u02e3\u0003\u0002\u0002\u0002",
    "\u00ac\u02e7\u0003\u0002\u0002\u0002\u00ae\u02eb\u0003\u0002\u0002\u0002",
    "\u00b0\u02ef\u0003\u0002\u0002\u0002\u00b2\u02f1\u0003\u0002\u0002\u0002",
    "\u00b4\u02f3\u0003\u0002\u0002\u0002\u00b6\u0302\u0003\u0002\u0002\u0002",
    "\u00b8\u0306\u0003\u0002\u0002\u0002\u00ba\u0308\u0003\u0002\u0002\u0002",
    "\u00bc\u0310\u0003\u0002\u0002\u0002\u00be\u0318\u0003\u0002\u0002\u0002",
    "\u00c0\u0320\u0003\u0002\u0002\u0002\u00c2\u0325\u0003\u0002\u0002\u0002",
    "\u00c4\u0329\u0003\u0002\u0002\u0002\u00c6\u0335\u0003\u0002\u0002\u0002",
    "\u00c8\u0337\u0003\u0002\u0002\u0002\u00ca\u033b\u0003\u0002\u0002\u0002",
    "\u00cc\u034a\u0003\u0002\u0002\u0002\u00ce\u034c\u0003\u0002\u0002\u0002",
    "\u00d0\u035d\u0003\u0002\u0002\u0002\u00d2\u0366\u0003\u0002\u0002\u0002",
    "\u00d4\u00d6\u0005\"\u0012\u0002\u00d5\u00d4\u0003\u0002\u0002\u0002",
    "\u00d5\u00d6\u0003\u0002\u0002\u0002\u00d6\u00d9\u0003\u0002\u0002\u0002",
    "\u00d7\u00da\u0005\u0004\u0003\u0002\u00d8\u00da\u0005\u0006\u0004\u0002",
    "\u00d9\u00d7\u0003\u0002\u0002\u0002\u00d9\u00d8\u0003\u0002\u0002\u0002",
    "\u00da\u0003\u0003\u0002\u0002\u0002\u00db\u00e3\u0005\n\u0006\u0002",
    "\u00dc\u00e3\u0005\u000e\b\u0002\u00dd\u00e3\u0005\u0012\n\u0002\u00de",
    "\u00e3\u0005\u0010\t\u0002\u00df\u00e3\u0005\u0016\f\u0002\u00e0\u00e3",
    "\u0005\u0014\u000b\u0002\u00e1\u00e3\u0003\u0002\u0002\u0002\u00e2\u00db",
    "\u0003\u0002\u0002\u0002\u00e2\u00dc\u0003\u0002\u0002\u0002\u00e2\u00dd",
    "\u0003\u0002\u0002\u0002\u00e2\u00de\u0003\u0002\u0002\u0002\u00e2\u00df",
    "\u0003\u0002\u0002\u0002\u00e2\u00e0\u0003\u0002\u0002\u0002\u00e2\u00e1",
    "\u0003\u0002\u0002\u0002\u00e3\u0005\u0003\u0002\u0002\u0002\u00e4\u00e5",
    "\u0005\b\u0005\u0002\u00e5\u0007\u0003\u0002\u0002\u0002\u00e6\u00ed",
    "\u0005&\u0014\u0002\u00e7\u00e8\u0005h5\u0002\u00e8\u00ea\u0005D#\u0002",
    "\u00e9\u00eb\u0005F$\u0002\u00ea\u00e9\u0003\u0002\u0002\u0002\u00ea",
    "\u00eb\u0003\u0002\u0002\u0002\u00eb\u00ed\u0003\u0002\u0002\u0002\u00ec",
    "\u00e6\u0003\u0002\u0002\u0002\u00ec\u00e7\u0003\u0002\u0002\u0002\u00ed",
    "\u00ee\u0003\u0002\u0002\u0002\u00ee\u00f0\u0005v<\u0002\u00ef\u00f1",
    "\u0005\u001a\u000e\u0002\u00f0\u00ef\u0003\u0002\u0002\u0002\u00f0\u00f1",
    "\u0003\u0002\u0002\u0002\u00f1\u00f3\u0003\u0002\u0002\u0002\u00f2\u00f4",
    "\u0005\u001c\u000f\u0002\u00f3\u00f2\u0003\u0002\u0002\u0002\u00f3\u00f4",
    "\u0003\u0002\u0002\u0002\u00f4\t\u0003\u0002\u0002\u0002\u00f5\u00f8",
    "\u0007\u0019\u0002\u0002\u00f6\u00f9\u0005\u0084C\u0002\u00f7\u00f9",
    "\u0005\u0082B\u0002\u00f8\u00f6\u0003\u0002\u0002\u0002\u00f8\u00f7",
    "\u0003\u0002\u0002\u0002\u00f9\u00fb\u0003\u0002\u0002\u0002\u00fa\u00fc",
    "\u0005\f\u0007\u0002\u00fb\u00fa\u0003\u0002\u0002\u0002\u00fb\u00fc",
    "\u0003\u0002\u0002\u0002\u00fc\u000b\u0003\u0002\u0002\u0002\u00fd\u00fe",
    "\u0007\u001a\u0002\u0002\u00fe\u00ff\u0007\u0017\u0002\u0002\u00ff\u0100",
    "\u0005\u0018\r\u0002\u0100\r\u0003\u0002\u0002\u0002\u0101\u0102\u0007",
    "\u0019\u0002\u0002\u0102\u0103\u0007\u0017\u0002\u0002\u0103\u0104\u0005",
    "\u0018\r\u0002\u0104\u000f\u0003\u0002\u0002\u0002\u0105\u0106\u0007",
    "\u001b\u0002\u0002\u0106\u0107\u0007\u0017\u0002\u0002\u0107\u0108\u0005",
    "\u0018\r\u0002\u0108\u0109\u0007\u001a\u0002\u0002\u0109\u010a\u0007",
    "\u0016\u0002\u0002\u010a\u010b\u0005\u0018\r\u0002\u010b\u0011\u0003",
    "\u0002\u0002\u0002\u010c\u010d\u0007\u0003\u0002\u0002\u010d\u0013\u0003",
    "\u0002\u0002\u0002\u010e\u010f\u0007\u001c\u0002\u0002\u010f\u0110\u0007",
    "\u0017\u0002\u0002\u0110\u0111\u0005\u0018\r\u0002\u0111\u0015\u0003",
    "\u0002\u0002\u0002\u0112\u0113\u0007\u001c\u0002\u0002\u0113\u0114\u0007",
    "\u0018\u0002\u0002\u0114\u0115\u0005\u00b2Z\u0002\u0115\u0017\u0003",
    "\u0002\u0002\u0002\u0116\u0117\u0007Q\u0002\u0002\u0117\u0019\u0003",
    "\u0002\u0002\u0002\u0118\u0119\u0007\u001a\u0002\u0002\u0119\u011a\u0005",
    "\u001e\u0010\u0002\u011a\u001b\u0003\u0002\u0002\u0002\u011b\u011c\u0007",
    "\u001a\u0002\u0002\u011c\u011d\u0005 \u0011\u0002\u011d\u001d\u0003",
    "\u0002\u0002\u0002\u011e\u011f\u0007M\u0002\u0002\u011f\u0120\u0007",
    "H\u0002\u0002\u0120\u0121\u0005\u00ccg\u0002\u0121\u001f\u0003\u0002",
    "\u0002\u0002\u0122\u0123\u0007N\u0002\u0002\u0123\u0124\u0007H\u0002",
    "\u0002\u0124\u0125\u0005\u00ccg\u0002\u0125!\u0003\u0002\u0002\u0002",
    "\u0126\u012b\u0005$\u0013\u0002\u0127\u0128\u0007,\u0002\u0002\u0128",
    "\u012a\u0005$\u0013\u0002\u0129\u0127\u0003\u0002\u0002\u0002\u012a",
    "\u012d\u0003\u0002\u0002\u0002\u012b\u0129\u0003\u0002\u0002\u0002\u012b",
    "\u012c\u0003\u0002\u0002\u0002\u012c#\u0003\u0002\u0002\u0002\u012d",
    "\u012b\u0003\u0002\u0002\u0002\u012e\u012f\u0007?\u0002\u0002\u012f",
    "\u0130\u0007Q\u0002\u0002\u0130\u0131\u0007H\u0002\u0002\u0131\u0132",
    "\u0005\u00b4[\u0002\u0132%\u0003\u0002\u0002\u0002\u0133\u0134\u0007",
    "&\u0002\u0002\u0134\u0135\u0005(\u0015\u0002\u0135\'\u0003\u0002\u0002",
    "\u0002\u0136\u0139\u0007+\u0002\u0002\u0137\u013a\u0005*\u0016\u0002",
    "\u0138\u013a\u0005,\u0017\u0002\u0139\u0137\u0003\u0002\u0002\u0002",
    "\u0139\u0138\u0003\u0002\u0002\u0002\u013a\u0142\u0003\u0002\u0002\u0002",
    "\u013b\u013e\u0007,\u0002\u0002\u013c\u013f\u0005*\u0016\u0002\u013d",
    "\u013f\u0005,\u0017\u0002\u013e\u013c\u0003\u0002\u0002\u0002\u013e",
    "\u013d\u0003\u0002\u0002\u0002\u013f\u0141\u0003\u0002\u0002\u0002\u0140",
    "\u013b\u0003\u0002\u0002\u0002\u0141\u0144\u0003\u0002\u0002\u0002\u0142",
    "\u0140\u0003\u0002\u0002\u0002\u0142\u0143\u0003\u0002\u0002\u0002\u0143",
    "\u0145\u0003\u0002\u0002\u0002\u0144\u0142\u0003\u0002\u0002\u0002\u0145",
    "\u0146\u0007-\u0002\u0002\u0146)\u0003\u0002\u0002\u0002\u0147\u014d",
    "\u0005.\u0018\u0002\u0148\u0149\u00050\u0019\u0002\u0149\u014a\u0007",
    ".\u0002\u0002\u014a\u014b\u0007I\u0002\u0002\u014b\u014d\u0003\u0002",
    "\u0002\u0002\u014c\u0147\u0003\u0002\u0002\u0002\u014c\u0148\u0003\u0002",
    "\u0002\u0002\u014d+\u0003\u0002\u0002\u0002\u014e\u014f\u00054\u001b",
    "\u0002\u014f-\u0003\u0002\u0002\u0002\u0150\u0155\u00050\u0019\u0002",
    "\u0151\u0152\u0007.\u0002\u0002\u0152\u0154\u00052\u001a\u0002\u0153",
    "\u0151\u0003\u0002\u0002\u0002\u0154\u0157\u0003\u0002\u0002\u0002\u0155",
    "\u0153\u0003\u0002\u0002\u0002\u0155\u0156\u0003\u0002\u0002\u0002\u0156",
    "/\u0003\u0002\u0002\u0002\u0157\u0155\u0003\u0002\u0002\u0002\u0158",
    "\u0159\u0007Q\u0002\u0002\u01591\u0003\u0002\u0002\u0002\u015a\u015b",
    "\u0007Q\u0002\u0002\u015b3\u0003\u0002\u0002\u0002\u015c\u015d\u0005",
    "8\u001d\u0002\u015d\u015e\u0007+\u0002\u0002\u015e\u0163\u0005:\u001e",
    "\u0002\u015f\u0160\u0007,\u0002\u0002\u0160\u0162\u0005:\u001e\u0002",
    "\u0161\u015f\u0003\u0002\u0002\u0002\u0162\u0165\u0003\u0002\u0002\u0002",
    "\u0163\u0161\u0003\u0002\u0002\u0002\u0163\u0164\u0003\u0002\u0002\u0002",
    "\u0164\u0166\u0003\u0002\u0002\u0002\u0165\u0163\u0003\u0002\u0002\u0002",
    "\u0166\u0167\u0007-\u0002\u0002\u0167\u0168\u00056\u001c\u0002\u0168",
    "5\u0003\u0002\u0002\u0002\u0169\u016a\u0007.\u0002\u0002\u016a\u016c",
    "\u0007Q\u0002\u0002\u016b\u0169\u0003\u0002\u0002\u0002\u016c\u016f",
    "\u0003\u0002\u0002\u0002\u016d\u016b\u0003\u0002\u0002\u0002\u016d\u016e",
    "\u0003\u0002\u0002\u0002\u016e7\u0003\u0002\u0002\u0002\u016f\u016d",
    "\u0003\u0002\u0002\u0002\u0170\u0171\u0005> \u0002\u01719\u0003\u0002",
    "\u0002\u0002\u0172\u0175\u0005@!\u0002\u0173\u0175\u0005<\u001f\u0002",
    "\u0174\u0172\u0003\u0002\u0002\u0002\u0174\u0173\u0003\u0002\u0002\u0002",
    "\u0175;\u0003\u0002\u0002\u0002\u0176\u0177\u0007Q\u0002\u0002\u0177",
    "\u0178\u0007H\u0002\u0002\u0178\u0179\u0005@!\u0002\u0179=\u0003\u0002",
    "\u0002\u0002\u017a\u017d\u0007Q\u0002\u0002\u017b\u017c\u0007.\u0002",
    "\u0002\u017c\u017e\u0007Q\u0002\u0002\u017d\u017b\u0003\u0002\u0002",
    "\u0002\u017d\u017e\u0003\u0002\u0002\u0002\u017e?\u0003\u0002\u0002",
    "\u0002\u017f\u0184\u00050\u0019\u0002\u0180\u0184\u0005.\u0018\u0002",
    "\u0181\u0184\u00054\u001b\u0002\u0182\u0184\u0005B\"\u0002\u0183\u017f",
    "\u0003\u0002\u0002\u0002\u0183\u0180\u0003\u0002\u0002\u0002\u0183\u0181",
    "\u0003\u0002\u0002\u0002\u0183\u0182\u0003\u0002\u0002\u0002\u0184A",
    "\u0003\u0002\u0002\u0002\u0185\u0189\u0007V\u0002\u0002\u0186\u0189",
    "\u0007P\u0002\u0002\u0187\u0189\u0005\u00caf\u0002\u0188\u0185\u0003",
    "\u0002\u0002\u0002\u0188\u0186\u0003\u0002\u0002\u0002\u0188\u0187\u0003",
    "\u0002\u0002\u0002\u0189C\u0003\u0002\u0002\u0002\u018a\u018b\u0007",
    "!\u0002\u0002\u018b\u018c\u0005H%\u0002\u018cE\u0003\u0002\u0002\u0002",
    "\u018d\u018e\u0007)\u0002\u0002\u018e\u018f\u0007V\u0002\u0002\u018f",
    "\u0190\u0007S\u0002\u0002\u0190\u0193\u0003\u0002\u0002\u0002\u0191",
    "\u0192\u0007*\u0002\u0002\u0192\u0194\u0005L\'\u0002\u0193\u0191\u0003",
    "\u0002\u0002\u0002\u0193\u0194\u0003\u0002\u0002\u0002\u0194\u0198\u0003",
    "\u0002\u0002\u0002\u0195\u0196\u0007*\u0002\u0002\u0196\u0198\u0005",
    "L\'\u0002\u0197\u018d\u0003\u0002\u0002\u0002\u0197\u0195\u0003\u0002",
    "\u0002\u0002\u0198G\u0003\u0002\u0002\u0002\u0199\u019c\u0005T+\u0002",
    "\u019a\u019c\u0005J&\u0002\u019b\u0199\u0003\u0002\u0002\u0002\u019b",
    "\u019a\u0003\u0002\u0002\u0002\u019cI\u0003\u0002\u0002\u0002\u019d",
    "\u019e\u0007\u0004\u0002\u0002\u019e\u019f\u0007H\u0002\u0002\u019f",
    "\u01a0\u0005N(\u0002\u01a0K\u0003\u0002\u0002\u0002\u01a1\u01a2\u0007",
    "V\u0002\u0002\u01a2\u01a8\u0007S\u0002\u0002\u01a3\u01a4\u0007V\u0002",
    "\u0002\u01a4\u01a8\u0007J\u0002\u0002\u01a5\u01a8\u0005N(\u0002\u01a6",
    "\u01a8\u0007#\u0002\u0002\u01a7\u01a1\u0003\u0002\u0002\u0002\u01a7",
    "\u01a3\u0003\u0002\u0002\u0002\u01a7\u01a5\u0003\u0002\u0002\u0002\u01a7",
    "\u01a6\u0003\u0002\u0002\u0002\u01a8M\u0003\u0002\u0002\u0002\u01a9",
    "\u01ab\u0005P)\u0002\u01aa\u01ac\u0005R*\u0002\u01ab\u01aa\u0003\u0002",
    "\u0002\u0002\u01ab\u01ac\u0003\u0002\u0002\u0002\u01acO\u0003\u0002",
    "\u0002\u0002\u01ad\u01ae\u0007V\u0002\u0002\u01ae\u01af\u0007K\u0002",
    "\u0002\u01af\u01b0\u0007V\u0002\u0002\u01b0\u01b1\u0007K\u0002\u0002",
    "\u01b1\u01b2\u0007V\u0002\u0002\u01b2Q\u0003\u0002\u0002\u0002\u01b3",
    "\u01b4\u0007V\u0002\u0002\u01b4\u01b5\u0007H\u0002\u0002\u01b5\u01b8",
    "\u0007V\u0002\u0002\u01b6\u01b7\u0007H\u0002\u0002\u01b7\u01b9\u0007",
    "V\u0002\u0002\u01b8\u01b6\u0003\u0002\u0002\u0002\u01b8\u01b9\u0003",
    "\u0002\u0002\u0002\u01b9\u01bb\u0003\u0002\u0002\u0002\u01ba\u01bc\u0007",
    "O\u0002\u0002\u01bb\u01ba\u0003\u0002\u0002\u0002\u01bb\u01bc\u0003",
    "\u0002\u0002\u0002\u01bcS\u0003\u0002\u0002\u0002\u01bd\u01be\b+\u0001",
    "\u0002\u01be\u01c6\u0005X-\u0002\u01bf\u01c0\u0007+\u0002\u0002\u01c0",
    "\u01c1\u0005T+\u0002\u01c1\u01c2\u0007-\u0002\u0002\u01c2\u01c6\u0003",
    "\u0002\u0002\u0002\u01c3\u01c4\u0007/\u0002\u0002\u01c4\u01c6\u0005",
    "T+\u0003\u01c5\u01bd\u0003\u0002\u0002\u0002\u01c5\u01bf\u0003\u0002",
    "\u0002\u0002\u01c5\u01c3\u0003\u0002\u0002\u0002\u01c6\u01cd\u0003\u0002",
    "\u0002\u0002\u01c7\u01c8\f\u0005\u0002\u0002\u01c8\u01c9\u0005V,\u0002",
    "\u01c9\u01ca\u0005T+\u0006\u01ca\u01cc\u0003\u0002\u0002\u0002\u01cb",
    "\u01c7\u0003\u0002\u0002\u0002\u01cc\u01cf\u0003\u0002\u0002\u0002\u01cd",
    "\u01cb\u0003\u0002\u0002\u0002\u01cd\u01ce\u0003\u0002\u0002\u0002\u01ce",
    "U\u0003\u0002\u0002\u0002\u01cf\u01cd\u0003\u0002\u0002\u0002\u01d0",
    "\u01d1\t\u0002\u0002\u0002\u01d1W\u0003\u0002\u0002\u0002\u01d2\u01d3",
    "\u0005Z.\u0002\u01d3\u01d4\u0005`1\u0002\u01d4\u01d5\u0005\\/\u0002",
    "\u01d5\u01e1\u0003\u0002\u0002\u0002\u01d6\u01d7\u0005^0\u0002\u01d7",
    "\u01d8\u0005d3\u0002\u01d8\u01d9\u0005Z.\u0002\u01d9\u01da\u00070\u0002",
    "\u0002\u01da\u01db\u0005\\/\u0002\u01db\u01e1\u0003\u0002\u0002\u0002",
    "\u01dc\u01dd\u0005^0\u0002\u01dd\u01de\u0005f4\u0002\u01de\u01df\u0007",
    "6\u0002\u0002\u01df\u01e1\u0003\u0002\u0002\u0002\u01e0\u01d2\u0003",
    "\u0002\u0002\u0002\u01e0\u01d6\u0003\u0002\u0002\u0002\u01e0\u01dc\u0003",
    "\u0002\u0002\u0002\u01e1Y\u0003\u0002\u0002\u0002\u01e2\u01e3\u0005",
    "@!\u0002\u01e3[\u0003\u0002\u0002\u0002\u01e4\u01e5\u0005@!\u0002\u01e5",
    "]\u0003\u0002\u0002\u0002\u01e6\u01e7\u0005@!\u0002\u01e7_\u0003\u0002",
    "\u0002\u0002\u01e8\u01f1\u0005b2\u0002\u01e9\u01ea\u0007L\u0002\u0002",
    "\u01ea\u01eb\u0007+\u0002\u0002\u01eb\u01ec\u0005b2\u0002\u01ec\u01ed",
    "\u0007,\u0002\u0002\u01ed\u01ee\u0007V\u0002\u0002\u01ee\u01ef\u0007",
    "-\u0002\u0002\u01ef\u01f1\u0003\u0002\u0002\u0002\u01f0\u01e8\u0003",
    "\u0002\u0002\u0002\u01f0\u01e9\u0003\u0002\u0002\u0002\u01f1a\u0003",
    "\u0002\u0002\u0002\u01f2\u01f3\t\u0003\u0002\u0002\u01f3c\u0003\u0002",
    "\u0002\u0002\u01f4\u01fc\u0007$\u0002\u0002\u01f5\u01f6\u0007L\u0002",
    "\u0002\u01f6\u01f7\u0007+\u0002\u0002\u01f7\u01f8\u0007$\u0002\u0002",
    "\u01f8\u01f9\u0007,\u0002\u0002\u01f9\u01fa\u0007V\u0002\u0002\u01fa",
    "\u01fc\u0007-\u0002\u0002\u01fb\u01f4\u0003\u0002\u0002\u0002\u01fb",
    "\u01f5\u0003\u0002\u0002\u0002\u01fce\u0003\u0002\u0002\u0002\u01fd",
    "\u0201\u0007%\u0002\u0002\u01fe\u01ff\u0007%\u0002\u0002\u01ff\u0201",
    "\u0007/\u0002\u0002\u0200\u01fd\u0003\u0002\u0002\u0002\u0200\u01fe",
    "\u0003\u0002\u0002\u0002\u0201g\u0003\u0002\u0002\u0002\u0202\u0203",
    "\u0007=\u0002\u0002\u0203\u0204\u0005(\u0015\u0002\u0204i\u0003\u0002",
    "\u0002\u0002\u0205\u0208\u0005l7\u0002\u0206\u0208\u0005n8\u0002\u0207",
    "\u0205\u0003\u0002\u0002\u0002\u0207\u0206\u0003\u0002\u0002\u0002\u0208",
    "k\u0003\u0002\u0002\u0002\u0209\u020a\u0007B\u0002\u0002\u020a\u020b",
    "\u00077\u0002\u0002\u020b\u020c\u0007@\u0002\u0002\u020c\u020d\u0007",
    "C\u0002\u0002\u020d\u020e\u00077\u0002\u0002\u020e\u020f\u0005t;\u0002",
    "\u020fm\u0003\u0002\u0002\u0002\u0210\u0211\u0007B\u0002\u0002\u0211",
    "\u0212\u00077\u0002\u0002\u0212\u0215\u0007D\u0002\u0002\u0213\u0216",
    "\u0005p9\u0002\u0214\u0216\u0005r:\u0002\u0215\u0213\u0003\u0002\u0002",
    "\u0002\u0215\u0214\u0003\u0002\u0002\u0002\u0216o\u0003\u0002\u0002",
    "\u0002\u0217\u0218\u0007E\u0002\u0002\u0218\u0219\u00077\u0002\u0002",
    "\u0219\u021a\u0007P\u0002\u0002\u021aq\u0003\u0002\u0002\u0002\u021b",
    "\u021c\u0007F\u0002\u0002\u021c\u021d\u00077\u0002\u0002\u021d\u021e",
    "\u0007P\u0002\u0002\u021es\u0003\u0002\u0002\u0002\u021f\u0220\u0005",
    "\u00b4[\u0002\u0220u\u0003\u0002\u0002\u0002\u0221\u0222\u0007\u001d",
    "\u0002\u0002\u0222\u0225\u0005x=\u0002\u0223\u0224\u0007,\u0002\u0002",
    "\u0224\u0226\u0005~@\u0002\u0225\u0223\u0003\u0002\u0002\u0002\u0225",
    "\u0226\u0003\u0002\u0002\u0002\u0226w\u0003\u0002\u0002\u0002\u0227",
    "\u022c\u0005z>\u0002\u0228\u0229\u0007,\u0002\u0002\u0229\u022b\u0005",
    "z>\u0002\u022a\u0228\u0003\u0002\u0002\u0002\u022b\u022e\u0003\u0002",
    "\u0002\u0002\u022c\u022a\u0003\u0002\u0002\u0002\u022c\u022d\u0003\u0002",
    "\u0002\u0002\u022dy\u0003\u0002\u0002\u0002\u022e\u022c\u0003\u0002",
    "\u0002\u0002\u022f\u0230\u0007\'\u0002\u0002\u0230\u0231\u0005\u00b0",
    "Y\u0002\u0231\u0232\u0007\u001f\u0002\u0002\u0232\u0235\u0005|?\u0002",
    "\u0233\u0234\u0007 \u0002\u0002\u0234\u0236\u0005T+\u0002\u0235\u0233",
    "\u0003\u0002\u0002\u0002\u0235\u0236\u0003\u0002\u0002\u0002\u0236{",
    "\u0003\u0002\u0002\u0002\u0237\u0238\u0007Q\u0002\u0002\u0238\u023a",
    "\u0007H\u0002\u0002\u0239\u0237\u0003\u0002\u0002\u0002\u0239\u023a",
    "\u0003\u0002\u0002\u0002\u023a\u023b\u0003\u0002\u0002\u0002\u023b\u023e",
    "\u0007Q\u0002\u0002\u023c\u023d\u0007.\u0002\u0002\u023d\u023f\u0007",
    "Q\u0002\u0002\u023e\u023c\u0003\u0002\u0002\u0002\u023e\u023f\u0003",
    "\u0002\u0002\u0002\u023f}\u0003\u0002\u0002\u0002\u0240\u0245\u0005",
    "\u0080A\u0002\u0241\u0242\u0007,\u0002\u0002\u0242\u0244\u0005\u0080",
    "A\u0002\u0243\u0241\u0003\u0002\u0002\u0002\u0244\u0247\u0003\u0002",
    "\u0002\u0002\u0245\u0243\u0003\u0002\u0002\u0002\u0245\u0246\u0003\u0002",
    "\u0002\u0002\u0246\u007f\u0003\u0002\u0002\u0002\u0247\u0245\u0003\u0002",
    "\u0002\u0002\u0248\u024b\u0005\u0082B\u0002\u0249\u024b\u0005\u0084",
    "C\u0002\u024a\u0248\u0003\u0002\u0002\u0002\u024a\u0249\u0003\u0002",
    "\u0002\u0002\u024b\u0081\u0003\u0002\u0002\u0002\u024c\u024d\u0007\u0005",
    "\u0002\u0002\u024d\u024e\u0005\u00b2Z\u0002\u024e\u024f\u0005\u00b4",
    "[\u0002\u024f\u0083\u0003\u0002\u0002\u0002\u0250\u0251\u0007\u0006",
    "\u0002\u0002\u0251\u0252\u0005\u00b2Z\u0002\u0252\u0253\u0005\u0086",
    "D\u0002\u0253\u0254\u0005\u008aF\u0002\u0254\u0085\u0003\u0002\u0002",
    "\u0002\u0255\u0256\u0007\u0007\u0002\u0002\u0256\u025b\u0005\u0088E",
    "\u0002\u0257\u0258\u0007,\u0002\u0002\u0258\u025a\u0005\u0088E\u0002",
    "\u0259\u0257\u0003\u0002\u0002\u0002\u025a\u025d\u0003\u0002\u0002\u0002",
    "\u025b\u0259\u0003\u0002\u0002\u0002\u025b\u025c\u0003\u0002\u0002\u0002",
    "\u025c\u0087\u0003\u0002\u0002\u0002\u025d\u025b\u0003\u0002\u0002\u0002",
    "\u025e\u025f\u0005|?\u0002\u025f\u0260\u0007(\u0002\u0002\u0260\u0261",
    "\u0007Q\u0002\u0002\u0261\u0089\u0003\u0002\u0002\u0002\u0262\u0263",
    "\u0007\b\u0002\u0002\u0263\u0268\u0005\u008cG\u0002\u0264\u0265\u0007",
    ",\u0002\u0002\u0265\u0267\u0005\u008cG\u0002\u0266\u0264\u0003\u0002",
    "\u0002\u0002\u0267\u026a\u0003\u0002\u0002\u0002\u0268\u0266\u0003\u0002",
    "\u0002\u0002\u0268\u0269\u0003\u0002\u0002\u0002\u0269\u026b\u0003\u0002",
    "\u0002\u0002\u026a\u0268\u0003\u0002\u0002\u0002\u026b\u026c\u0007\t",
    "\u0002\u0002\u026c\u008b\u0003\u0002\u0002\u0002\u026d\u026e\u0007P",
    "\u0002\u0002\u026e\u026f\u0007H\u0002\u0002\u026f\u0270\u0007\b\u0002",
    "\u0002\u0270\u0275\u0005\u008eH\u0002\u0271\u0272\u0007,\u0002\u0002",
    "\u0272\u0274\u0005\u008eH\u0002\u0273\u0271\u0003\u0002\u0002\u0002",
    "\u0274\u0277\u0003\u0002\u0002\u0002\u0275\u0273\u0003\u0002\u0002\u0002",
    "\u0275\u0276\u0003\u0002\u0002\u0002\u0276\u0278\u0003\u0002\u0002\u0002",
    "\u0277\u0275\u0003\u0002\u0002\u0002\u0278\u0279\u0007\t\u0002\u0002",
    "\u0279\u008d\u0003\u0002\u0002\u0002\u027a\u027b\u0005\u0090I\u0002",
    "\u027b\u027c\u0007H\u0002\u0002\u027c\u027d\u0007\b\u0002\u0002\u027d",
    "\u027e\u0005\u0094K\u0002\u027e\u027f\u0007\t\u0002\u0002\u027f\u008f",
    "\u0003\u0002\u0002\u0002\u0280\u028c\u0005\u0092J\u0002\u0281\u0282",
    "\u0007\n\u0002\u0002\u0282\u0285\u0005\u0092J\u0002\u0283\u0284\u0007",
    ",\u0002\u0002\u0284\u0286\u0005\u0092J\u0002\u0285\u0283\u0003\u0002",
    "\u0002\u0002\u0286\u0287\u0003\u0002\u0002\u0002\u0287\u0285\u0003\u0002",
    "\u0002\u0002\u0287\u0288\u0003\u0002\u0002\u0002\u0288\u0289\u0003\u0002",
    "\u0002\u0002\u0289\u028a\u0007\u000b\u0002\u0002\u028a\u028c\u0003\u0002",
    "\u0002\u0002\u028b\u0280\u0003\u0002\u0002\u0002\u028b\u0281\u0003\u0002",
    "\u0002\u0002\u028c\u0091\u0003\u0002\u0002\u0002\u028d\u0292\u0007Q",
    "\u0002\u0002\u028e\u028f\u0007.\u0002\u0002\u028f\u0291\u0007Q\u0002",
    "\u0002\u0290\u028e\u0003\u0002\u0002\u0002\u0291\u0294\u0003\u0002\u0002",
    "\u0002\u0292\u0290\u0003\u0002\u0002\u0002\u0292\u0293\u0003\u0002\u0002",
    "\u0002\u0293\u0093\u0003\u0002\u0002\u0002\u0294\u0292\u0003\u0002\u0002",
    "\u0002\u0295\u0296\u0005\u0098M\u0002\u0296\u0297\u0007,\u0002\u0002",
    "\u0297\u0298\u0005\u0096L\u0002\u0298\u029e\u0003\u0002\u0002\u0002",
    "\u0299\u029a\u0005\u0096L\u0002\u029a\u029b\u0007,\u0002\u0002\u029b",
    "\u029c\u0005\u0098M\u0002\u029c\u029e\u0003\u0002\u0002\u0002\u029d",
    "\u0295\u0003\u0002\u0002\u0002\u029d\u0299\u0003\u0002\u0002\u0002\u029e",
    "\u0095\u0003\u0002\u0002\u0002\u029f\u02a0\u0007\f\u0002\u0002\u02a0",
    "\u02a1\u0007H\u0002\u0002\u02a1\u02a2\u0007V\u0002\u0002\u02a2\u0097",
    "\u0003\u0002\u0002\u0002\u02a3\u02a4\u0007\r\u0002\u0002\u02a4\u02a5",
    "\u0007H\u0002\u0002\u02a5\u02a6\u0007\n\u0002\u0002\u02a6\u02ab\u0005",
    "\u009aN\u0002\u02a7\u02a8\u0007,\u0002\u0002\u02a8\u02aa\u0005\u009a",
    "N\u0002\u02a9\u02a7\u0003\u0002\u0002\u0002\u02aa\u02ad\u0003\u0002",
    "\u0002\u0002\u02ab\u02a9\u0003\u0002\u0002\u0002\u02ab\u02ac\u0003\u0002",
    "\u0002\u0002\u02ac\u02ae\u0003\u0002\u0002\u0002\u02ad\u02ab\u0003\u0002",
    "\u0002\u0002\u02ae\u02af\u0007\u000b\u0002\u0002\u02af\u0099\u0003\u0002",
    "\u0002\u0002\u02b0\u02b9\u0007\b\u0002\u0002\u02b1\u02b2\u0005\u009c",
    "O\u0002\u02b2\u02b3\u0007,\u0002\u0002\u02b3\u02b4\u0005\u009eP\u0002",
    "\u02b4\u02ba\u0003\u0002\u0002\u0002\u02b5\u02b6\u0005\u009eP\u0002",
    "\u02b6\u02b7\u0007,\u0002\u0002\u02b7\u02b8\u0005\u009cO\u0002\u02b8",
    "\u02ba\u0003\u0002\u0002\u0002\u02b9\u02b1\u0003\u0002\u0002\u0002\u02b9",
    "\u02b5\u0003\u0002\u0002\u0002\u02ba\u02bb\u0003\u0002\u0002\u0002\u02bb",
    "\u02bc\u0007\t\u0002\u0002\u02bc\u009b\u0003\u0002\u0002\u0002\u02bd",
    "\u02be\u0007\u000e\u0002\u0002\u02be\u02bf\u0007H\u0002\u0002\u02bf",
    "\u02c0\u0007V\u0002\u0002\u02c0\u009d\u0003\u0002\u0002\u0002\u02c1",
    "\u02c2\u0007\u000f\u0002\u0002\u02c2\u02c6\u0007H\u0002\u0002\u02c3",
    "\u02c7\u0005\u00a4S\u0002\u02c4\u02c7\u0005\u00a0Q\u0002\u02c5\u02c7",
    "\u0005\u00a2R\u0002\u02c6\u02c3\u0003\u0002\u0002\u0002\u02c6\u02c4",
    "\u0003\u0002\u0002\u0002\u02c6\u02c5\u0003\u0002\u0002\u0002\u02c7\u009f",
    "\u0003\u0002\u0002\u0002\u02c8\u02c9\u0007\n\u0002\u0002\u02c9\u02ce",
    "\u0005\u00a2R\u0002\u02ca\u02cb\u0007H\u0002\u0002\u02cb\u02cd\u0005",
    "\u00a2R\u0002\u02cc\u02ca\u0003\u0002\u0002\u0002\u02cd\u02d0\u0003",
    "\u0002\u0002\u0002\u02ce\u02cc\u0003\u0002\u0002\u0002\u02ce\u02cf\u0003",
    "\u0002\u0002\u0002\u02cf\u02d1\u0003\u0002\u0002\u0002\u02d0\u02ce\u0003",
    "\u0002\u0002\u0002\u02d1\u02d2\u0007\u000b\u0002\u0002\u02d2\u00a1\u0003",
    "\u0002\u0002\u0002\u02d3\u02d4\u0005\u00caf\u0002\u02d4\u00a3\u0003",
    "\u0002\u0002\u0002\u02d5\u02da\u0005\u00a6T\u0002\u02d6\u02da\u0005",
    "\u00a8U\u0002\u02d7\u02da\u0005\u00aaV\u0002\u02d8\u02da\u0005\u00ac",
    "W\u0002\u02d9\u02d5\u0003\u0002\u0002\u0002\u02d9\u02d6\u0003\u0002",
    "\u0002\u0002\u02d9\u02d7\u0003\u0002\u0002\u0002\u02d9\u02d8\u0003\u0002",
    "\u0002\u0002\u02da\u00a5\u0003\u0002\u0002\u0002\u02db\u02dc\u0007\n",
    "\u0002\u0002\u02dc\u02dd\u0005\u00aeX\u0002\u02dd\u02de\u0007\u000b",
    "\u0002\u0002\u02de\u00a7\u0003\u0002\u0002\u0002\u02df\u02e0\u0007\n",
    "\u0002\u0002\u02e0\u02e1\u0005\u00aeX\u0002\u02e1\u02e2\u0007-\u0002",
    "\u0002\u02e2\u00a9\u0003\u0002\u0002\u0002\u02e3\u02e4\u0007+\u0002",
    "\u0002\u02e4\u02e5\u0005\u00aeX\u0002\u02e5\u02e6\u0007\u000b\u0002",
    "\u0002\u02e6\u00ab\u0003\u0002\u0002\u0002\u02e7\u02e8\u0007+\u0002",
    "\u0002\u02e8\u02e9\u0005\u00aeX\u0002\u02e9\u02ea\u0007-\u0002\u0002",
    "\u02ea\u00ad\u0003\u0002\u0002\u0002\u02eb\u02ec\u0007V\u0002\u0002",
    "\u02ec\u02ed\u0007\u0010\u0002\u0002\u02ed\u02ee\u0007V\u0002\u0002",
    "\u02ee\u00af\u0003\u0002\u0002\u0002\u02ef\u02f0\u0007Q\u0002\u0002",
    "\u02f0\u00b1\u0003\u0002\u0002\u0002\u02f1\u02f2\u0007Q\u0002\u0002",
    "\u02f2\u00b3\u0003\u0002\u0002\u0002\u02f3\u02f4\u0005\u00b6\\\u0002",
    "\u02f4\u02f5\u0007\u0011\u0002\u0002\u02f5\u02f8\u0005\u00b8]\u0002",
    "\u02f6\u02f7\u0007H\u0002\u0002\u02f7\u02f9\u0005\u00c2b\u0002\u02f8",
    "\u02f6\u0003\u0002\u0002\u0002\u02f8\u02f9\u0003\u0002\u0002\u0002\u02f9",
    "\u02fc\u0003\u0002\u0002\u0002\u02fa\u02fb\u0007K\u0002\u0002\u02fb",
    "\u02fd\u0005\u00c4c\u0002\u02fc\u02fa\u0003\u0002\u0002\u0002\u02fc",
    "\u02fd\u0003\u0002\u0002\u0002\u02fd\u0300\u0003\u0002\u0002\u0002\u02fe",
    "\u02ff\u0007\u0012\u0002\u0002\u02ff\u0301\u0005\u00be`\u0002\u0300",
    "\u02fe\u0003\u0002\u0002\u0002\u0300\u0301\u0003\u0002\u0002\u0002\u0301",
    "\u00b5\u0003\u0002\u0002\u0002\u0302\u0303\u0007Q\u0002\u0002\u0303",
    "\u00b7\u0003\u0002\u0002\u0002\u0304\u0307\u0005\u00ba^\u0002\u0305",
    "\u0307\u0005\u00bc_\u0002\u0306\u0304\u0003\u0002\u0002\u0002\u0306",
    "\u0305\u0003\u0002\u0002\u0002\u0307\u00b9\u0003\u0002\u0002\u0002\u0308",
    "\u030d\u0007Q\u0002\u0002\u0309\u030a\u0007.\u0002\u0002\u030a\u030c",
    "\u0007Q\u0002\u0002\u030b\u0309\u0003\u0002\u0002\u0002\u030c\u030f",
    "\u0003\u0002\u0002\u0002\u030d\u030b\u0003\u0002\u0002\u0002\u030d\u030e",
    "\u0003\u0002\u0002\u0002\u030e\u00bb\u0003\u0002\u0002\u0002\u030f\u030d",
    "\u0003\u0002\u0002\u0002\u0310\u0311\u0007W\u0002\u0002\u0311\u0312",
    "\u0007.\u0002\u0002\u0312\u0313\u0007W\u0002\u0002\u0313\u0314\u0007",
    ".\u0002\u0002\u0314\u0315\u0007W\u0002\u0002\u0315\u0316\u0007.\u0002",
    "\u0002\u0316\u0317\u0007W\u0002\u0002\u0317\u00bd\u0003\u0002\u0002",
    "\u0002\u0318\u031d\u0005\u00c0a\u0002\u0319\u031a\u0007\u0013\u0002",
    "\u0002\u031a\u031c\u0005\u00c0a\u0002\u031b\u0319\u0003\u0002\u0002",
    "\u0002\u031c\u031f\u0003\u0002\u0002\u0002\u031d\u031b\u0003\u0002\u0002",
    "\u0002\u031d\u031e\u0003\u0002\u0002\u0002\u031e\u00bf\u0003\u0002\u0002",
    "\u0002\u031f\u031d\u0003\u0002\u0002\u0002\u0320\u0323\u0007Q\u0002",
    "\u0002\u0321\u0322\u00077\u0002\u0002\u0322\u0324\t\u0004\u0002\u0002",
    "\u0323\u0321\u0003\u0002\u0002\u0002\u0323\u0324\u0003\u0002\u0002\u0002",
    "\u0324\u00c1\u0003\u0002\u0002\u0002\u0325\u0326\u0007W\u0002\u0002",
    "\u0326\u00c3\u0003\u0002\u0002\u0002\u0327\u032a\u0005\u00c6d\u0002",
    "\u0328\u032a\u0005\u00c8e\u0002\u0329\u0327\u0003\u0002\u0002\u0002",
    "\u0329\u0328\u0003\u0002\u0002\u0002\u032a\u0332\u0003\u0002\u0002\u0002",
    "\u032b\u032e\u0007K\u0002\u0002\u032c\u032f\u0005\u00c6d\u0002\u032d",
    "\u032f\u0005\u00c8e\u0002\u032e\u032c\u0003\u0002\u0002\u0002\u032e",
    "\u032d\u0003\u0002\u0002\u0002\u032f\u0331\u0003\u0002\u0002\u0002\u0330",
    "\u032b\u0003\u0002\u0002\u0002\u0331\u0334\u0003\u0002\u0002\u0002\u0332",
    "\u0330\u0003\u0002\u0002\u0002\u0332\u0333\u0003\u0002\u0002\u0002\u0333",
    "\u00c5\u0003\u0002\u0002\u0002\u0334\u0332\u0003\u0002\u0002\u0002\u0335",
    "\u0336\u0007Q\u0002\u0002\u0336\u00c7\u0003\u0002\u0002\u0002\u0337",
    "\u0338\u0007\b\u0002\u0002\u0338\u0339\u0007Q\u0002\u0002\u0339\u033a",
    "\u0007\t\u0002\u0002\u033a\u00c9\u0003\u0002\u0002\u0002\u033b\u033c",
    "\u0005\u00d2j\u0002\u033c\u00cb\u0003\u0002\u0002\u0002\u033d\u033e",
    "\u0007\b\u0002\u0002\u033e\u0343\u0005\u00ceh\u0002\u033f\u0340\u0007",
    ",\u0002\u0002\u0340\u0342\u0005\u00ceh\u0002\u0341\u033f\u0003\u0002",
    "\u0002\u0002\u0342\u0345\u0003\u0002\u0002\u0002\u0343\u0341\u0003\u0002",
    "\u0002\u0002\u0343\u0344\u0003\u0002\u0002\u0002\u0344\u0346\u0003\u0002",
    "\u0002\u0002\u0345\u0343\u0003\u0002\u0002\u0002\u0346\u0347\u0007\t",
    "\u0002\u0002\u0347\u034b\u0003\u0002\u0002\u0002\u0348\u0349\u0007\b",
    "\u0002\u0002\u0349\u034b\u0007\t\u0002\u0002\u034a\u033d\u0003\u0002",
    "\u0002\u0002\u034a\u0348\u0003\u0002\u0002\u0002\u034b\u00cd\u0003\u0002",
    "\u0002\u0002\u034c\u034d\u0007P\u0002\u0002\u034d\u034e\u0007H\u0002",
    "\u0002\u034e\u034f\u0005\u00d2j\u0002\u034f\u00cf\u0003\u0002\u0002",
    "\u0002\u0350\u0351\u0007\n\u0002\u0002\u0351\u0356\u0005\u00d2j\u0002",
    "\u0352\u0353\u0007,\u0002\u0002\u0353\u0355\u0005\u00d2j\u0002\u0354",
    "\u0352\u0003\u0002\u0002\u0002\u0355\u0358\u0003\u0002\u0002\u0002\u0356",
    "\u0357\u0003\u0002\u0002\u0002\u0356\u0354\u0003\u0002\u0002\u0002\u0357",
    "\u0359\u0003\u0002\u0002\u0002\u0358\u0356\u0003\u0002\u0002\u0002\u0359",
    "\u035a\u0007\u000b\u0002\u0002\u035a\u035e\u0003\u0002\u0002\u0002\u035b",
    "\u035c\u0007\n\u0002\u0002\u035c\u035e\u0007\u000b\u0002\u0002\u035d",
    "\u0350\u0003\u0002\u0002\u0002\u035d\u035b\u0003\u0002\u0002\u0002\u035e",
    "\u00d1\u0003\u0002\u0002\u0002\u035f\u0367\u0007P\u0002\u0002\u0360",
    "\u0367\u0007V\u0002\u0002\u0361\u0367\u0005\u00ccg\u0002\u0362\u0367",
    "\u0005\u00d0i\u0002\u0363\u0367\u0007\u0014\u0002\u0002\u0364\u0367",
    "\u0007\u0015\u0002\u0002\u0365\u0367\u00076\u0002\u0002\u0366\u035f",
    "\u0003\u0002\u0002\u0002\u0366\u0360\u0003\u0002\u0002\u0002\u0366\u0361",
    "\u0003\u0002\u0002\u0002\u0366\u0362\u0003\u0002\u0002\u0002\u0366\u0363",
    "\u0003\u0002\u0002\u0002\u0366\u0364\u0003\u0002\u0002\u0002\u0366\u0365",
    "\u0003\u0002\u0002\u0002\u0367\u00d3\u0003\u0002\u0002\u0002H\u00d5",
    "\u00d9\u00e2\u00ea\u00ec\u00f0\u00f3\u00f8\u00fb\u012b\u0139\u013e\u0142",
    "\u014c\u0155\u0163\u016d\u0174\u017d\u0183\u0188\u0193\u0197\u019b\u01a7",
    "\u01ab\u01b8\u01bb\u01c5\u01cd\u01e0\u01f0\u01fb\u0200\u0207\u0215\u0225",
    "\u022c\u0235\u0239\u023e\u0245\u024a\u025b\u0268\u0275\u0287\u028b\u0292",
    "\u029d\u02ab\u02b9\u02c6\u02ce\u02d9\u02f8\u02fc\u0300\u0306\u030d\u031d",
    "\u0323\u0329\u032e\u0332\u0343\u034a\u0356\u035d\u0366"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'tbd'", "'time'", "'aFunction'", "'sFunction'", 
                     "'is on'", "'{'", "'}'", "'['", "']'", "'weight'", 
                     "'ranges'", "'belief'", "'value'", "';'", "'://'", 
                     "'?'", "'&'", "'true'", "'false'", "'title'", "'package'", 
                     "'function'", "'create'", "'set'", "'alter'", "'drop'", 
                     "'define'", "'context entity'", "'is from'", "'where'", 
                     "'when'", "'date'", "'lifetime'", "'between'", "'is'", 
                     "'pull'", "'entity'", "'as'", "'every'", "'until'", 
                     "'('", "','", "')'", "'.'", null, null, null, "'xor'", 
                     "'in'", "'containsAny'", "'containsAll'", "'null'", 
                     "'='", "'<'", "'>'", "'<='", "'>='", "'!='", "'push'", 
                     "'into'", "'prefix'", "'http/post'", "'post'", "'method'", 
                     "'url'", "'fcm'", "'topic'", "'token'", "'type'", "':'", 
                     "'*'", "'occurences'", "'/'", "'$op'", "'output'", 
                     "'callback'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, "TITLE", "PACKAGE", "FUNCTION", "CREATE", 
                      "SET", "ALTER", "DROP", "DEFINE", "CONTEXT_ENTITY", 
                      "IS_FROM", "WHERE", "WHEN", "DATE", "LIFETIME", "BETWEEN", 
                      "IS", "PULL", "ENTITY", "AS", "EVERY", "UNTIL", "LPAREN", 
                      "COMMA", "RPAREN", "DOT", "NOT", "AND", "OR", "XOR", 
                      "IN", "CONTAINS_ANY", "CONTAINS_ALL", "NULL", "EQ", 
                      "LTH", "GTH", "LET", "GET", "NOT_EQ", "PUSH", "INTO", 
                      "PREFIX", "HTTPPOST", "POST", "METHOD", "URL", "FCM", 
                      "TOPIC", "TOKEN", "TYPE", "COLON", "ASTERISK", "OCCURRENCES", 
                      "FSLASH", "OP", "OUTPUT", "CALLBACK", "TIME_ZONE", 
                      "STRING", "ID", "ATTRIBUTEID", "UNIT_OF_TIME", "COMMENT", 
                      "WS", "NUMBER", "INT", "HEX" ];

var ruleNames =  [ "rule_Cdql", "rule_ddl_statement", "rule_dml_statement", 
                   "rule_query", "rule_create_function", "rule_set_package", 
                   "rule_create_package", "rule_alter_package", "rule_alter_function", 
                   "rule_drop_package", "rule_drop_function", "rule_package_title", 
                   "rule_Set_Config", "rule_Set_Callback", "rule_Output_Config", 
                   "rule_Callback_Config", "rule_Prefixs", "rule_Prefix", 
                   "rule_Pull", "rule_Select", "rule_select_Attribute", 
                   "rule_select_FunctionCall", "rule_Attribute", "rule_EntityTitle", 
                   "rule_AttributeTitle", "rule_FunctionCall", "rule_function_call_method_chaining", 
                   "rule_call_FunctionTitle", "rule_call_Operand", "rule_Name_Operand", 
                   "rule_FunctionTitle", "rule_Operand", "rule_ContextValue", 
                   "rule_When", "rule_repeat", "rule_Start", "rule_Date_Time_When", 
                   "rule_Occurrence", "rule_Date_Time", "rule_Date", "rule_Time", 
                   "rule_Condition", "rule_expr_op", "rule_Constraint", 
                   "rule_left_element", "rule_right_element", "rule_target_element", 
                   "rule_relational_op_func", "rule_relational_op", "rule_between_op", 
                   "rule_is_or_is_not", "ruel_Push", "rule_callback", "rule_http_calback", 
                   "rule_fcm_calback", "rule_fcm_topic", "rule_fcm_token", 
                   "rule_callback_url", "rule_Define", "rule_Define_Context_Entity", 
                   "rule_context_entity", "rule_entity_type", "rule_Define_Context_Function", 
                   "rule_context_function", "rule_aFunction", "rule_sFunction", 
                   "rule_is_on", "rule_is_on_entity", "cst_situation_def_rule", 
                   "rule_single_situatuin", "rule_situation_pair", "rule_situation_attributes", 
                   "rule_situation_attribute_name", "situation_pair_values", 
                   "situation_weight", "situation_range_values", "situation_pair_values_item", 
                   "rule_situation_belief", "rule_situation_value", "rule_discrete_value", 
                   "discrete_value", "rule_region_value", "region_value_inclusive", 
                   "region_value_left_inclusive", "region_value_right_inclusive", 
                   "region_value_exclusive", "region_value_value", "rule_entity_id", 
                   "rule_function_id", "rule_url", "authority", "host", 
                   "hostname", "hostnumber", "search", "searchparameter", 
                   "port", "path", "normal_path", "path_param", "json", 
                   "obj", "pair", "array", "value" ];

function CdqlParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

CdqlParser.prototype = Object.create(antlr4.Parser.prototype);
CdqlParser.prototype.constructor = CdqlParser;

Object.defineProperty(CdqlParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

CdqlParser.EOF = antlr4.Token.EOF;
CdqlParser.T__0 = 1;
CdqlParser.T__1 = 2;
CdqlParser.T__2 = 3;
CdqlParser.T__3 = 4;
CdqlParser.T__4 = 5;
CdqlParser.T__5 = 6;
CdqlParser.T__6 = 7;
CdqlParser.T__7 = 8;
CdqlParser.T__8 = 9;
CdqlParser.T__9 = 10;
CdqlParser.T__10 = 11;
CdqlParser.T__11 = 12;
CdqlParser.T__12 = 13;
CdqlParser.T__13 = 14;
CdqlParser.T__14 = 15;
CdqlParser.T__15 = 16;
CdqlParser.T__16 = 17;
CdqlParser.T__17 = 18;
CdqlParser.T__18 = 19;
CdqlParser.TITLE = 20;
CdqlParser.PACKAGE = 21;
CdqlParser.FUNCTION = 22;
CdqlParser.CREATE = 23;
CdqlParser.SET = 24;
CdqlParser.ALTER = 25;
CdqlParser.DROP = 26;
CdqlParser.DEFINE = 27;
CdqlParser.CONTEXT_ENTITY = 28;
CdqlParser.IS_FROM = 29;
CdqlParser.WHERE = 30;
CdqlParser.WHEN = 31;
CdqlParser.DATE = 32;
CdqlParser.LIFETIME = 33;
CdqlParser.BETWEEN = 34;
CdqlParser.IS = 35;
CdqlParser.PULL = 36;
CdqlParser.ENTITY = 37;
CdqlParser.AS = 38;
CdqlParser.EVERY = 39;
CdqlParser.UNTIL = 40;
CdqlParser.LPAREN = 41;
CdqlParser.COMMA = 42;
CdqlParser.RPAREN = 43;
CdqlParser.DOT = 44;
CdqlParser.NOT = 45;
CdqlParser.AND = 46;
CdqlParser.OR = 47;
CdqlParser.XOR = 48;
CdqlParser.IN = 49;
CdqlParser.CONTAINS_ANY = 50;
CdqlParser.CONTAINS_ALL = 51;
CdqlParser.NULL = 52;
CdqlParser.EQ = 53;
CdqlParser.LTH = 54;
CdqlParser.GTH = 55;
CdqlParser.LET = 56;
CdqlParser.GET = 57;
CdqlParser.NOT_EQ = 58;
CdqlParser.PUSH = 59;
CdqlParser.INTO = 60;
CdqlParser.PREFIX = 61;
CdqlParser.HTTPPOST = 62;
CdqlParser.POST = 63;
CdqlParser.METHOD = 64;
CdqlParser.URL = 65;
CdqlParser.FCM = 66;
CdqlParser.TOPIC = 67;
CdqlParser.TOKEN = 68;
CdqlParser.TYPE = 69;
CdqlParser.COLON = 70;
CdqlParser.ASTERISK = 71;
CdqlParser.OCCURRENCES = 72;
CdqlParser.FSLASH = 73;
CdqlParser.OP = 74;
CdqlParser.OUTPUT = 75;
CdqlParser.CALLBACK = 76;
CdqlParser.TIME_ZONE = 77;
CdqlParser.STRING = 78;
CdqlParser.ID = 79;
CdqlParser.ATTRIBUTEID = 80;
CdqlParser.UNIT_OF_TIME = 81;
CdqlParser.COMMENT = 82;
CdqlParser.WS = 83;
CdqlParser.NUMBER = 84;
CdqlParser.INT = 85;
CdqlParser.HEX = 86;

CdqlParser.RULE_rule_Cdql = 0;
CdqlParser.RULE_rule_ddl_statement = 1;
CdqlParser.RULE_rule_dml_statement = 2;
CdqlParser.RULE_rule_query = 3;
CdqlParser.RULE_rule_create_function = 4;
CdqlParser.RULE_rule_set_package = 5;
CdqlParser.RULE_rule_create_package = 6;
CdqlParser.RULE_rule_alter_package = 7;
CdqlParser.RULE_rule_alter_function = 8;
CdqlParser.RULE_rule_drop_package = 9;
CdqlParser.RULE_rule_drop_function = 10;
CdqlParser.RULE_rule_package_title = 11;
CdqlParser.RULE_rule_Set_Config = 12;
CdqlParser.RULE_rule_Set_Callback = 13;
CdqlParser.RULE_rule_Output_Config = 14;
CdqlParser.RULE_rule_Callback_Config = 15;
CdqlParser.RULE_rule_Prefixs = 16;
CdqlParser.RULE_rule_Prefix = 17;
CdqlParser.RULE_rule_Pull = 18;
CdqlParser.RULE_rule_Select = 19;
CdqlParser.RULE_rule_select_Attribute = 20;
CdqlParser.RULE_rule_select_FunctionCall = 21;
CdqlParser.RULE_rule_Attribute = 22;
CdqlParser.RULE_rule_EntityTitle = 23;
CdqlParser.RULE_rule_AttributeTitle = 24;
CdqlParser.RULE_rule_FunctionCall = 25;
CdqlParser.RULE_rule_function_call_method_chaining = 26;
CdqlParser.RULE_rule_call_FunctionTitle = 27;
CdqlParser.RULE_rule_call_Operand = 28;
CdqlParser.RULE_rule_Name_Operand = 29;
CdqlParser.RULE_rule_FunctionTitle = 30;
CdqlParser.RULE_rule_Operand = 31;
CdqlParser.RULE_rule_ContextValue = 32;
CdqlParser.RULE_rule_When = 33;
CdqlParser.RULE_rule_repeat = 34;
CdqlParser.RULE_rule_Start = 35;
CdqlParser.RULE_rule_Date_Time_When = 36;
CdqlParser.RULE_rule_Occurrence = 37;
CdqlParser.RULE_rule_Date_Time = 38;
CdqlParser.RULE_rule_Date = 39;
CdqlParser.RULE_rule_Time = 40;
CdqlParser.RULE_rule_Condition = 41;
CdqlParser.RULE_rule_expr_op = 42;
CdqlParser.RULE_rule_Constraint = 43;
CdqlParser.RULE_rule_left_element = 44;
CdqlParser.RULE_rule_right_element = 45;
CdqlParser.RULE_rule_target_element = 46;
CdqlParser.RULE_rule_relational_op_func = 47;
CdqlParser.RULE_rule_relational_op = 48;
CdqlParser.RULE_rule_between_op = 49;
CdqlParser.RULE_rule_is_or_is_not = 50;
CdqlParser.RULE_ruel_Push = 51;
CdqlParser.RULE_rule_callback = 52;
CdqlParser.RULE_rule_http_calback = 53;
CdqlParser.RULE_rule_fcm_calback = 54;
CdqlParser.RULE_rule_fcm_topic = 55;
CdqlParser.RULE_rule_fcm_token = 56;
CdqlParser.RULE_rule_callback_url = 57;
CdqlParser.RULE_rule_Define = 58;
CdqlParser.RULE_rule_Define_Context_Entity = 59;
CdqlParser.RULE_rule_context_entity = 60;
CdqlParser.RULE_rule_entity_type = 61;
CdqlParser.RULE_rule_Define_Context_Function = 62;
CdqlParser.RULE_rule_context_function = 63;
CdqlParser.RULE_rule_aFunction = 64;
CdqlParser.RULE_rule_sFunction = 65;
CdqlParser.RULE_rule_is_on = 66;
CdqlParser.RULE_rule_is_on_entity = 67;
CdqlParser.RULE_cst_situation_def_rule = 68;
CdqlParser.RULE_rule_single_situatuin = 69;
CdqlParser.RULE_rule_situation_pair = 70;
CdqlParser.RULE_rule_situation_attributes = 71;
CdqlParser.RULE_rule_situation_attribute_name = 72;
CdqlParser.RULE_situation_pair_values = 73;
CdqlParser.RULE_situation_weight = 74;
CdqlParser.RULE_situation_range_values = 75;
CdqlParser.RULE_situation_pair_values_item = 76;
CdqlParser.RULE_rule_situation_belief = 77;
CdqlParser.RULE_rule_situation_value = 78;
CdqlParser.RULE_rule_discrete_value = 79;
CdqlParser.RULE_discrete_value = 80;
CdqlParser.RULE_rule_region_value = 81;
CdqlParser.RULE_region_value_inclusive = 82;
CdqlParser.RULE_region_value_left_inclusive = 83;
CdqlParser.RULE_region_value_right_inclusive = 84;
CdqlParser.RULE_region_value_exclusive = 85;
CdqlParser.RULE_region_value_value = 86;
CdqlParser.RULE_rule_entity_id = 87;
CdqlParser.RULE_rule_function_id = 88;
CdqlParser.RULE_rule_url = 89;
CdqlParser.RULE_authority = 90;
CdqlParser.RULE_host = 91;
CdqlParser.RULE_hostname = 92;
CdqlParser.RULE_hostnumber = 93;
CdqlParser.RULE_search = 94;
CdqlParser.RULE_searchparameter = 95;
CdqlParser.RULE_port = 96;
CdqlParser.RULE_path = 97;
CdqlParser.RULE_normal_path = 98;
CdqlParser.RULE_path_param = 99;
CdqlParser.RULE_json = 100;
CdqlParser.RULE_obj = 101;
CdqlParser.RULE_pair = 102;
CdqlParser.RULE_array = 103;
CdqlParser.RULE_value = 104;

function Rule_CdqlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_Cdql;
    return this;
}

Rule_CdqlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_CdqlContext.prototype.constructor = Rule_CdqlContext;

Rule_CdqlContext.prototype.rule_ddl_statement = function() {
    return this.getTypedRuleContext(Rule_ddl_statementContext,0);
};

Rule_CdqlContext.prototype.rule_dml_statement = function() {
    return this.getTypedRuleContext(Rule_dml_statementContext,0);
};

Rule_CdqlContext.prototype.rule_Prefixs = function() {
    return this.getTypedRuleContext(Rule_PrefixsContext,0);
};

Rule_CdqlContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_Cdql(this);
	}
};

Rule_CdqlContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_Cdql(this);
	}
};

Rule_CdqlContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_Cdql(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_CdqlContext = Rule_CdqlContext;

CdqlParser.prototype.rule_Cdql = function() {

    var localctx = new Rule_CdqlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, CdqlParser.RULE_rule_Cdql);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 211;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CdqlParser.PREFIX) {
            this.state = 210;
            this.rule_Prefixs();
        }

        this.state = 215;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CdqlParser.EOF:
        case CdqlParser.T__0:
        case CdqlParser.CREATE:
        case CdqlParser.ALTER:
        case CdqlParser.DROP:
            this.state = 213;
            this.rule_ddl_statement();
            break;
        case CdqlParser.PULL:
        case CdqlParser.PUSH:
            this.state = 214;
            this.rule_dml_statement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_ddl_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_ddl_statement;
    return this;
}

Rule_ddl_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_ddl_statementContext.prototype.constructor = Rule_ddl_statementContext;

Rule_ddl_statementContext.prototype.rule_create_function = function() {
    return this.getTypedRuleContext(Rule_create_functionContext,0);
};

Rule_ddl_statementContext.prototype.rule_create_package = function() {
    return this.getTypedRuleContext(Rule_create_packageContext,0);
};

Rule_ddl_statementContext.prototype.rule_alter_function = function() {
    return this.getTypedRuleContext(Rule_alter_functionContext,0);
};

Rule_ddl_statementContext.prototype.rule_alter_package = function() {
    return this.getTypedRuleContext(Rule_alter_packageContext,0);
};

Rule_ddl_statementContext.prototype.rule_drop_function = function() {
    return this.getTypedRuleContext(Rule_drop_functionContext,0);
};

Rule_ddl_statementContext.prototype.rule_drop_package = function() {
    return this.getTypedRuleContext(Rule_drop_packageContext,0);
};

Rule_ddl_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_ddl_statement(this);
	}
};

Rule_ddl_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_ddl_statement(this);
	}
};

Rule_ddl_statementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_ddl_statement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_ddl_statementContext = Rule_ddl_statementContext;

CdqlParser.prototype.rule_ddl_statement = function() {

    var localctx = new Rule_ddl_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, CdqlParser.RULE_rule_ddl_statement);
    try {
        this.state = 224;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 217;
            this.rule_create_function();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 218;
            this.rule_create_package();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 219;
            this.rule_alter_function();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 220;
            this.rule_alter_package();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 221;
            this.rule_drop_function();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 222;
            this.rule_drop_package();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_dml_statementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_dml_statement;
    return this;
}

Rule_dml_statementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_dml_statementContext.prototype.constructor = Rule_dml_statementContext;

Rule_dml_statementContext.prototype.rule_query = function() {
    return this.getTypedRuleContext(Rule_queryContext,0);
};

Rule_dml_statementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_dml_statement(this);
	}
};

Rule_dml_statementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_dml_statement(this);
	}
};

Rule_dml_statementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_dml_statement(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_dml_statementContext = Rule_dml_statementContext;

CdqlParser.prototype.rule_dml_statement = function() {

    var localctx = new Rule_dml_statementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, CdqlParser.RULE_rule_dml_statement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 226;
        this.rule_query();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_queryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_query;
    return this;
}

Rule_queryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_queryContext.prototype.constructor = Rule_queryContext;

Rule_queryContext.prototype.rule_Define = function() {
    return this.getTypedRuleContext(Rule_DefineContext,0);
};

Rule_queryContext.prototype.rule_Pull = function() {
    return this.getTypedRuleContext(Rule_PullContext,0);
};

Rule_queryContext.prototype.ruel_Push = function() {
    return this.getTypedRuleContext(Ruel_PushContext,0);
};

Rule_queryContext.prototype.rule_When = function() {
    return this.getTypedRuleContext(Rule_WhenContext,0);
};

Rule_queryContext.prototype.rule_Set_Config = function() {
    return this.getTypedRuleContext(Rule_Set_ConfigContext,0);
};

Rule_queryContext.prototype.rule_Set_Callback = function() {
    return this.getTypedRuleContext(Rule_Set_CallbackContext,0);
};

Rule_queryContext.prototype.rule_repeat = function() {
    return this.getTypedRuleContext(Rule_repeatContext,0);
};

Rule_queryContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_query(this);
	}
};

Rule_queryContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_query(this);
	}
};

Rule_queryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_query(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_queryContext = Rule_queryContext;

CdqlParser.prototype.rule_query = function() {

    var localctx = new Rule_queryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, CdqlParser.RULE_rule_query);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 234;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CdqlParser.PULL:
            this.state = 228;
            this.rule_Pull();
            break;
        case CdqlParser.PUSH:
            this.state = 229;
            this.ruel_Push();
            this.state = 230;
            this.rule_When();
            this.state = 232;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CdqlParser.EVERY || _la===CdqlParser.UNTIL) {
                this.state = 231;
                this.rule_repeat();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 236;
        this.rule_Define();
        this.state = 238;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
        if(la_===1) {
            this.state = 237;
            this.rule_Set_Config();

        }
        this.state = 241;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CdqlParser.SET) {
            this.state = 240;
            this.rule_Set_Callback();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_create_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_create_function;
    return this;
}

Rule_create_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_create_functionContext.prototype.constructor = Rule_create_functionContext;

Rule_create_functionContext.prototype.CREATE = function() {
    return this.getToken(CdqlParser.CREATE, 0);
};

Rule_create_functionContext.prototype.rule_sFunction = function() {
    return this.getTypedRuleContext(Rule_sFunctionContext,0);
};

Rule_create_functionContext.prototype.rule_aFunction = function() {
    return this.getTypedRuleContext(Rule_aFunctionContext,0);
};

Rule_create_functionContext.prototype.rule_set_package = function() {
    return this.getTypedRuleContext(Rule_set_packageContext,0);
};

Rule_create_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_create_function(this);
	}
};

Rule_create_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_create_function(this);
	}
};

Rule_create_functionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_create_function(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_create_functionContext = Rule_create_functionContext;

CdqlParser.prototype.rule_create_function = function() {

    var localctx = new Rule_create_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, CdqlParser.RULE_rule_create_function);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 243;
        this.match(CdqlParser.CREATE);
        this.state = 246;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CdqlParser.T__3:
            this.state = 244;
            this.rule_sFunction();
            break;
        case CdqlParser.T__2:
            this.state = 245;
            this.rule_aFunction();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 249;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CdqlParser.SET) {
            this.state = 248;
            this.rule_set_package();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_set_packageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_set_package;
    return this;
}

Rule_set_packageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_set_packageContext.prototype.constructor = Rule_set_packageContext;

Rule_set_packageContext.prototype.SET = function() {
    return this.getToken(CdqlParser.SET, 0);
};

Rule_set_packageContext.prototype.PACKAGE = function() {
    return this.getToken(CdqlParser.PACKAGE, 0);
};

Rule_set_packageContext.prototype.rule_package_title = function() {
    return this.getTypedRuleContext(Rule_package_titleContext,0);
};

Rule_set_packageContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_set_package(this);
	}
};

Rule_set_packageContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_set_package(this);
	}
};

Rule_set_packageContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_set_package(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_set_packageContext = Rule_set_packageContext;

CdqlParser.prototype.rule_set_package = function() {

    var localctx = new Rule_set_packageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, CdqlParser.RULE_rule_set_package);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 251;
        this.match(CdqlParser.SET);
        this.state = 252;
        this.match(CdqlParser.PACKAGE);
        this.state = 253;
        this.rule_package_title();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_create_packageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_create_package;
    return this;
}

Rule_create_packageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_create_packageContext.prototype.constructor = Rule_create_packageContext;

Rule_create_packageContext.prototype.CREATE = function() {
    return this.getToken(CdqlParser.CREATE, 0);
};

Rule_create_packageContext.prototype.PACKAGE = function() {
    return this.getToken(CdqlParser.PACKAGE, 0);
};

Rule_create_packageContext.prototype.rule_package_title = function() {
    return this.getTypedRuleContext(Rule_package_titleContext,0);
};

Rule_create_packageContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_create_package(this);
	}
};

Rule_create_packageContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_create_package(this);
	}
};

Rule_create_packageContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_create_package(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_create_packageContext = Rule_create_packageContext;

CdqlParser.prototype.rule_create_package = function() {

    var localctx = new Rule_create_packageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, CdqlParser.RULE_rule_create_package);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 255;
        this.match(CdqlParser.CREATE);
        this.state = 256;
        this.match(CdqlParser.PACKAGE);
        this.state = 257;
        this.rule_package_title();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_alter_packageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_alter_package;
    return this;
}

Rule_alter_packageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_alter_packageContext.prototype.constructor = Rule_alter_packageContext;

Rule_alter_packageContext.prototype.ALTER = function() {
    return this.getToken(CdqlParser.ALTER, 0);
};

Rule_alter_packageContext.prototype.PACKAGE = function() {
    return this.getToken(CdqlParser.PACKAGE, 0);
};

Rule_alter_packageContext.prototype.rule_package_title = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Rule_package_titleContext);
    } else {
        return this.getTypedRuleContext(Rule_package_titleContext,i);
    }
};

Rule_alter_packageContext.prototype.SET = function() {
    return this.getToken(CdqlParser.SET, 0);
};

Rule_alter_packageContext.prototype.TITLE = function() {
    return this.getToken(CdqlParser.TITLE, 0);
};

Rule_alter_packageContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_alter_package(this);
	}
};

Rule_alter_packageContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_alter_package(this);
	}
};

Rule_alter_packageContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_alter_package(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_alter_packageContext = Rule_alter_packageContext;

CdqlParser.prototype.rule_alter_package = function() {

    var localctx = new Rule_alter_packageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, CdqlParser.RULE_rule_alter_package);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 259;
        this.match(CdqlParser.ALTER);
        this.state = 260;
        this.match(CdqlParser.PACKAGE);
        this.state = 261;
        this.rule_package_title();
        this.state = 262;
        this.match(CdqlParser.SET);
        this.state = 263;
        this.match(CdqlParser.TITLE);
        this.state = 264;
        this.rule_package_title();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_alter_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_alter_function;
    return this;
}

Rule_alter_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_alter_functionContext.prototype.constructor = Rule_alter_functionContext;


Rule_alter_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_alter_function(this);
	}
};

Rule_alter_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_alter_function(this);
	}
};

Rule_alter_functionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_alter_function(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_alter_functionContext = Rule_alter_functionContext;

CdqlParser.prototype.rule_alter_function = function() {

    var localctx = new Rule_alter_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, CdqlParser.RULE_rule_alter_function);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 266;
        this.match(CdqlParser.T__0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_drop_packageContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_drop_package;
    return this;
}

Rule_drop_packageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_drop_packageContext.prototype.constructor = Rule_drop_packageContext;

Rule_drop_packageContext.prototype.DROP = function() {
    return this.getToken(CdqlParser.DROP, 0);
};

Rule_drop_packageContext.prototype.PACKAGE = function() {
    return this.getToken(CdqlParser.PACKAGE, 0);
};

Rule_drop_packageContext.prototype.rule_package_title = function() {
    return this.getTypedRuleContext(Rule_package_titleContext,0);
};

Rule_drop_packageContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_drop_package(this);
	}
};

Rule_drop_packageContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_drop_package(this);
	}
};

Rule_drop_packageContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_drop_package(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_drop_packageContext = Rule_drop_packageContext;

CdqlParser.prototype.rule_drop_package = function() {

    var localctx = new Rule_drop_packageContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, CdqlParser.RULE_rule_drop_package);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 268;
        this.match(CdqlParser.DROP);
        this.state = 269;
        this.match(CdqlParser.PACKAGE);
        this.state = 270;
        this.rule_package_title();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_drop_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_drop_function;
    return this;
}

Rule_drop_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_drop_functionContext.prototype.constructor = Rule_drop_functionContext;

Rule_drop_functionContext.prototype.DROP = function() {
    return this.getToken(CdqlParser.DROP, 0);
};

Rule_drop_functionContext.prototype.FUNCTION = function() {
    return this.getToken(CdqlParser.FUNCTION, 0);
};

Rule_drop_functionContext.prototype.rule_function_id = function() {
    return this.getTypedRuleContext(Rule_function_idContext,0);
};

Rule_drop_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_drop_function(this);
	}
};

Rule_drop_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_drop_function(this);
	}
};

Rule_drop_functionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_drop_function(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_drop_functionContext = Rule_drop_functionContext;

CdqlParser.prototype.rule_drop_function = function() {

    var localctx = new Rule_drop_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, CdqlParser.RULE_rule_drop_function);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 272;
        this.match(CdqlParser.DROP);
        this.state = 273;
        this.match(CdqlParser.FUNCTION);
        this.state = 274;
        this.rule_function_id();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_package_titleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_package_title;
    return this;
}

Rule_package_titleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_package_titleContext.prototype.constructor = Rule_package_titleContext;

Rule_package_titleContext.prototype.ID = function() {
    return this.getToken(CdqlParser.ID, 0);
};

Rule_package_titleContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_package_title(this);
	}
};

Rule_package_titleContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_package_title(this);
	}
};

Rule_package_titleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_package_title(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_package_titleContext = Rule_package_titleContext;

CdqlParser.prototype.rule_package_title = function() {

    var localctx = new Rule_package_titleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, CdqlParser.RULE_rule_package_title);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 276;
        this.match(CdqlParser.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_Set_ConfigContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_Set_Config;
    return this;
}

Rule_Set_ConfigContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_Set_ConfigContext.prototype.constructor = Rule_Set_ConfigContext;

Rule_Set_ConfigContext.prototype.SET = function() {
    return this.getToken(CdqlParser.SET, 0);
};

Rule_Set_ConfigContext.prototype.rule_Output_Config = function() {
    return this.getTypedRuleContext(Rule_Output_ConfigContext,0);
};

Rule_Set_ConfigContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_Set_Config(this);
	}
};

Rule_Set_ConfigContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_Set_Config(this);
	}
};

Rule_Set_ConfigContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_Set_Config(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_Set_ConfigContext = Rule_Set_ConfigContext;

CdqlParser.prototype.rule_Set_Config = function() {

    var localctx = new Rule_Set_ConfigContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, CdqlParser.RULE_rule_Set_Config);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 278;
        this.match(CdqlParser.SET);

        this.state = 279;
        this.rule_Output_Config();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_Set_CallbackContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_Set_Callback;
    return this;
}

Rule_Set_CallbackContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_Set_CallbackContext.prototype.constructor = Rule_Set_CallbackContext;

Rule_Set_CallbackContext.prototype.SET = function() {
    return this.getToken(CdqlParser.SET, 0);
};

Rule_Set_CallbackContext.prototype.rule_Callback_Config = function() {
    return this.getTypedRuleContext(Rule_Callback_ConfigContext,0);
};

Rule_Set_CallbackContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_Set_Callback(this);
	}
};

Rule_Set_CallbackContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_Set_Callback(this);
	}
};

Rule_Set_CallbackContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_Set_Callback(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_Set_CallbackContext = Rule_Set_CallbackContext;

CdqlParser.prototype.rule_Set_Callback = function() {

    var localctx = new Rule_Set_CallbackContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, CdqlParser.RULE_rule_Set_Callback);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 281;
        this.match(CdqlParser.SET);

        this.state = 282;
        this.rule_Callback_Config();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_Output_ConfigContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_Output_Config;
    return this;
}

Rule_Output_ConfigContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_Output_ConfigContext.prototype.constructor = Rule_Output_ConfigContext;

Rule_Output_ConfigContext.prototype.OUTPUT = function() {
    return this.getToken(CdqlParser.OUTPUT, 0);
};

Rule_Output_ConfigContext.prototype.COLON = function() {
    return this.getToken(CdqlParser.COLON, 0);
};

Rule_Output_ConfigContext.prototype.obj = function() {
    return this.getTypedRuleContext(ObjContext,0);
};

Rule_Output_ConfigContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_Output_Config(this);
	}
};

Rule_Output_ConfigContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_Output_Config(this);
	}
};

Rule_Output_ConfigContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_Output_Config(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_Output_ConfigContext = Rule_Output_ConfigContext;

CdqlParser.prototype.rule_Output_Config = function() {

    var localctx = new Rule_Output_ConfigContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, CdqlParser.RULE_rule_Output_Config);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 284;
        this.match(CdqlParser.OUTPUT);
        this.state = 285;
        this.match(CdqlParser.COLON);
        this.state = 286;
        this.obj();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_Callback_ConfigContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_Callback_Config;
    return this;
}

Rule_Callback_ConfigContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_Callback_ConfigContext.prototype.constructor = Rule_Callback_ConfigContext;

Rule_Callback_ConfigContext.prototype.CALLBACK = function() {
    return this.getToken(CdqlParser.CALLBACK, 0);
};

Rule_Callback_ConfigContext.prototype.COLON = function() {
    return this.getToken(CdqlParser.COLON, 0);
};

Rule_Callback_ConfigContext.prototype.obj = function() {
    return this.getTypedRuleContext(ObjContext,0);
};

Rule_Callback_ConfigContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_Callback_Config(this);
	}
};

Rule_Callback_ConfigContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_Callback_Config(this);
	}
};

Rule_Callback_ConfigContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_Callback_Config(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_Callback_ConfigContext = Rule_Callback_ConfigContext;

CdqlParser.prototype.rule_Callback_Config = function() {

    var localctx = new Rule_Callback_ConfigContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, CdqlParser.RULE_rule_Callback_Config);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 288;
        this.match(CdqlParser.CALLBACK);
        this.state = 289;
        this.match(CdqlParser.COLON);
        this.state = 290;
        this.obj();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_PrefixsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_Prefixs;
    return this;
}

Rule_PrefixsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_PrefixsContext.prototype.constructor = Rule_PrefixsContext;

Rule_PrefixsContext.prototype.rule_Prefix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Rule_PrefixContext);
    } else {
        return this.getTypedRuleContext(Rule_PrefixContext,i);
    }
};

Rule_PrefixsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CdqlParser.COMMA);
    } else {
        return this.getToken(CdqlParser.COMMA, i);
    }
};


Rule_PrefixsContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_Prefixs(this);
	}
};

Rule_PrefixsContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_Prefixs(this);
	}
};

Rule_PrefixsContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_Prefixs(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_PrefixsContext = Rule_PrefixsContext;

CdqlParser.prototype.rule_Prefixs = function() {

    var localctx = new Rule_PrefixsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, CdqlParser.RULE_rule_Prefixs);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 292;
        this.rule_Prefix();
        this.state = 297;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CdqlParser.COMMA) {
            this.state = 293;
            this.match(CdqlParser.COMMA);
            this.state = 294;
            this.rule_Prefix();
            this.state = 299;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_PrefixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_Prefix;
    return this;
}

Rule_PrefixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_PrefixContext.prototype.constructor = Rule_PrefixContext;

Rule_PrefixContext.prototype.PREFIX = function() {
    return this.getToken(CdqlParser.PREFIX, 0);
};

Rule_PrefixContext.prototype.ID = function() {
    return this.getToken(CdqlParser.ID, 0);
};

Rule_PrefixContext.prototype.COLON = function() {
    return this.getToken(CdqlParser.COLON, 0);
};

Rule_PrefixContext.prototype.rule_url = function() {
    return this.getTypedRuleContext(Rule_urlContext,0);
};

Rule_PrefixContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_Prefix(this);
	}
};

Rule_PrefixContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_Prefix(this);
	}
};

Rule_PrefixContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_Prefix(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_PrefixContext = Rule_PrefixContext;

CdqlParser.prototype.rule_Prefix = function() {

    var localctx = new Rule_PrefixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, CdqlParser.RULE_rule_Prefix);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 300;
        this.match(CdqlParser.PREFIX);
        this.state = 301;
        this.match(CdqlParser.ID);
        this.state = 302;
        this.match(CdqlParser.COLON);
        this.state = 303;
        this.rule_url();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_PullContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_Pull;
    return this;
}

Rule_PullContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_PullContext.prototype.constructor = Rule_PullContext;

Rule_PullContext.prototype.PULL = function() {
    return this.getToken(CdqlParser.PULL, 0);
};

Rule_PullContext.prototype.rule_Select = function() {
    return this.getTypedRuleContext(Rule_SelectContext,0);
};

Rule_PullContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_Pull(this);
	}
};

Rule_PullContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_Pull(this);
	}
};

Rule_PullContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_Pull(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_PullContext = Rule_PullContext;

CdqlParser.prototype.rule_Pull = function() {

    var localctx = new Rule_PullContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, CdqlParser.RULE_rule_Pull);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 305;
        this.match(CdqlParser.PULL);
        this.state = 306;
        this.rule_Select();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_SelectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_Select;
    return this;
}

Rule_SelectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_SelectContext.prototype.constructor = Rule_SelectContext;

Rule_SelectContext.prototype.LPAREN = function() {
    return this.getToken(CdqlParser.LPAREN, 0);
};

Rule_SelectContext.prototype.RPAREN = function() {
    return this.getToken(CdqlParser.RPAREN, 0);
};

Rule_SelectContext.prototype.rule_select_Attribute = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Rule_select_AttributeContext);
    } else {
        return this.getTypedRuleContext(Rule_select_AttributeContext,i);
    }
};

Rule_SelectContext.prototype.rule_select_FunctionCall = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Rule_select_FunctionCallContext);
    } else {
        return this.getTypedRuleContext(Rule_select_FunctionCallContext,i);
    }
};

Rule_SelectContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CdqlParser.COMMA);
    } else {
        return this.getToken(CdqlParser.COMMA, i);
    }
};


Rule_SelectContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_Select(this);
	}
};

Rule_SelectContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_Select(this);
	}
};

Rule_SelectContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_Select(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_SelectContext = Rule_SelectContext;

CdqlParser.prototype.rule_Select = function() {

    var localctx = new Rule_SelectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, CdqlParser.RULE_rule_Select);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 308;
        this.match(CdqlParser.LPAREN);
        this.state = 311;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
        switch(la_) {
        case 1:
            this.state = 309;
            this.rule_select_Attribute();
            break;

        case 2:
            this.state = 310;
            this.rule_select_FunctionCall();
            break;

        }
        this.state = 320;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CdqlParser.COMMA) {
            this.state = 313;
            this.match(CdqlParser.COMMA);
            this.state = 316;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
            switch(la_) {
            case 1:
                this.state = 314;
                this.rule_select_Attribute();
                break;

            case 2:
                this.state = 315;
                this.rule_select_FunctionCall();
                break;

            }
            this.state = 322;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 323;
        this.match(CdqlParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_select_AttributeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_select_Attribute;
    return this;
}

Rule_select_AttributeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_select_AttributeContext.prototype.constructor = Rule_select_AttributeContext;

Rule_select_AttributeContext.prototype.rule_Attribute = function() {
    return this.getTypedRuleContext(Rule_AttributeContext,0);
};

Rule_select_AttributeContext.prototype.rule_EntityTitle = function() {
    return this.getTypedRuleContext(Rule_EntityTitleContext,0);
};

Rule_select_AttributeContext.prototype.DOT = function() {
    return this.getToken(CdqlParser.DOT, 0);
};

Rule_select_AttributeContext.prototype.ASTERISK = function() {
    return this.getToken(CdqlParser.ASTERISK, 0);
};

Rule_select_AttributeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_select_Attribute(this);
	}
};

Rule_select_AttributeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_select_Attribute(this);
	}
};

Rule_select_AttributeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_select_Attribute(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_select_AttributeContext = Rule_select_AttributeContext;

CdqlParser.prototype.rule_select_Attribute = function() {

    var localctx = new Rule_select_AttributeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, CdqlParser.RULE_rule_select_Attribute);
    try {
        this.state = 330;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 325;
            this.rule_Attribute();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 326;
            this.rule_EntityTitle();
            this.state = 327;
            this.match(CdqlParser.DOT);
            this.state = 328;
            this.match(CdqlParser.ASTERISK);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_select_FunctionCallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_select_FunctionCall;
    return this;
}

Rule_select_FunctionCallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_select_FunctionCallContext.prototype.constructor = Rule_select_FunctionCallContext;

Rule_select_FunctionCallContext.prototype.rule_FunctionCall = function() {
    return this.getTypedRuleContext(Rule_FunctionCallContext,0);
};

Rule_select_FunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_select_FunctionCall(this);
	}
};

Rule_select_FunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_select_FunctionCall(this);
	}
};

Rule_select_FunctionCallContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_select_FunctionCall(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_select_FunctionCallContext = Rule_select_FunctionCallContext;

CdqlParser.prototype.rule_select_FunctionCall = function() {

    var localctx = new Rule_select_FunctionCallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, CdqlParser.RULE_rule_select_FunctionCall);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 332;
        this.rule_FunctionCall();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_AttributeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_Attribute;
    return this;
}

Rule_AttributeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_AttributeContext.prototype.constructor = Rule_AttributeContext;

Rule_AttributeContext.prototype.rule_EntityTitle = function() {
    return this.getTypedRuleContext(Rule_EntityTitleContext,0);
};

Rule_AttributeContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CdqlParser.DOT);
    } else {
        return this.getToken(CdqlParser.DOT, i);
    }
};


Rule_AttributeContext.prototype.rule_AttributeTitle = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Rule_AttributeTitleContext);
    } else {
        return this.getTypedRuleContext(Rule_AttributeTitleContext,i);
    }
};

Rule_AttributeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_Attribute(this);
	}
};

Rule_AttributeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_Attribute(this);
	}
};

Rule_AttributeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_Attribute(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_AttributeContext = Rule_AttributeContext;

CdqlParser.prototype.rule_Attribute = function() {

    var localctx = new Rule_AttributeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, CdqlParser.RULE_rule_Attribute);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 334;
        this.rule_EntityTitle();
        this.state = 339;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,14,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 335;
                this.match(CdqlParser.DOT);
                this.state = 336;
                this.rule_AttributeTitle(); 
            }
            this.state = 341;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,14,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_EntityTitleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_EntityTitle;
    return this;
}

Rule_EntityTitleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_EntityTitleContext.prototype.constructor = Rule_EntityTitleContext;

Rule_EntityTitleContext.prototype.ID = function() {
    return this.getToken(CdqlParser.ID, 0);
};

Rule_EntityTitleContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_EntityTitle(this);
	}
};

Rule_EntityTitleContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_EntityTitle(this);
	}
};

Rule_EntityTitleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_EntityTitle(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_EntityTitleContext = Rule_EntityTitleContext;

CdqlParser.prototype.rule_EntityTitle = function() {

    var localctx = new Rule_EntityTitleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, CdqlParser.RULE_rule_EntityTitle);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 342;
        this.match(CdqlParser.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_AttributeTitleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_AttributeTitle;
    return this;
}

Rule_AttributeTitleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_AttributeTitleContext.prototype.constructor = Rule_AttributeTitleContext;

Rule_AttributeTitleContext.prototype.ID = function() {
    return this.getToken(CdqlParser.ID, 0);
};

Rule_AttributeTitleContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_AttributeTitle(this);
	}
};

Rule_AttributeTitleContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_AttributeTitle(this);
	}
};

Rule_AttributeTitleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_AttributeTitle(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_AttributeTitleContext = Rule_AttributeTitleContext;

CdqlParser.prototype.rule_AttributeTitle = function() {

    var localctx = new Rule_AttributeTitleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, CdqlParser.RULE_rule_AttributeTitle);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 344;
        this.match(CdqlParser.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_FunctionCallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_FunctionCall;
    return this;
}

Rule_FunctionCallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_FunctionCallContext.prototype.constructor = Rule_FunctionCallContext;

Rule_FunctionCallContext.prototype.rule_call_FunctionTitle = function() {
    return this.getTypedRuleContext(Rule_call_FunctionTitleContext,0);
};

Rule_FunctionCallContext.prototype.LPAREN = function() {
    return this.getToken(CdqlParser.LPAREN, 0);
};

Rule_FunctionCallContext.prototype.rule_call_Operand = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Rule_call_OperandContext);
    } else {
        return this.getTypedRuleContext(Rule_call_OperandContext,i);
    }
};

Rule_FunctionCallContext.prototype.RPAREN = function() {
    return this.getToken(CdqlParser.RPAREN, 0);
};

Rule_FunctionCallContext.prototype.rule_function_call_method_chaining = function() {
    return this.getTypedRuleContext(Rule_function_call_method_chainingContext,0);
};

Rule_FunctionCallContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CdqlParser.COMMA);
    } else {
        return this.getToken(CdqlParser.COMMA, i);
    }
};


Rule_FunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_FunctionCall(this);
	}
};

Rule_FunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_FunctionCall(this);
	}
};

Rule_FunctionCallContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_FunctionCall(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_FunctionCallContext = Rule_FunctionCallContext;

CdqlParser.prototype.rule_FunctionCall = function() {

    var localctx = new Rule_FunctionCallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, CdqlParser.RULE_rule_FunctionCall);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 346;
        this.rule_call_FunctionTitle();
        this.state = 347;
        this.match(CdqlParser.LPAREN);
        this.state = 348;
        this.rule_call_Operand();
        this.state = 353;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CdqlParser.COMMA) {
            this.state = 349;
            this.match(CdqlParser.COMMA);
            this.state = 350;
            this.rule_call_Operand();
            this.state = 355;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 356;
        this.match(CdqlParser.RPAREN);
        this.state = 357;
        this.rule_function_call_method_chaining();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_function_call_method_chainingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_function_call_method_chaining;
    return this;
}

Rule_function_call_method_chainingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_function_call_method_chainingContext.prototype.constructor = Rule_function_call_method_chainingContext;

Rule_function_call_method_chainingContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CdqlParser.DOT);
    } else {
        return this.getToken(CdqlParser.DOT, i);
    }
};


Rule_function_call_method_chainingContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CdqlParser.ID);
    } else {
        return this.getToken(CdqlParser.ID, i);
    }
};


Rule_function_call_method_chainingContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_function_call_method_chaining(this);
	}
};

Rule_function_call_method_chainingContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_function_call_method_chaining(this);
	}
};

Rule_function_call_method_chainingContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_function_call_method_chaining(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_function_call_method_chainingContext = Rule_function_call_method_chainingContext;

CdqlParser.prototype.rule_function_call_method_chaining = function() {

    var localctx = new Rule_function_call_method_chainingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, CdqlParser.RULE_rule_function_call_method_chaining);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 363;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,16,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 359;
                this.match(CdqlParser.DOT);
                this.state = 360;
                this.match(CdqlParser.ID); 
            }
            this.state = 365;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,16,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_call_FunctionTitleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_call_FunctionTitle;
    return this;
}

Rule_call_FunctionTitleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_call_FunctionTitleContext.prototype.constructor = Rule_call_FunctionTitleContext;

Rule_call_FunctionTitleContext.prototype.rule_FunctionTitle = function() {
    return this.getTypedRuleContext(Rule_FunctionTitleContext,0);
};

Rule_call_FunctionTitleContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_call_FunctionTitle(this);
	}
};

Rule_call_FunctionTitleContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_call_FunctionTitle(this);
	}
};

Rule_call_FunctionTitleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_call_FunctionTitle(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_call_FunctionTitleContext = Rule_call_FunctionTitleContext;

CdqlParser.prototype.rule_call_FunctionTitle = function() {

    var localctx = new Rule_call_FunctionTitleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, CdqlParser.RULE_rule_call_FunctionTitle);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 366;
        this.rule_FunctionTitle();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_call_OperandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_call_Operand;
    return this;
}

Rule_call_OperandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_call_OperandContext.prototype.constructor = Rule_call_OperandContext;

Rule_call_OperandContext.prototype.rule_Operand = function() {
    return this.getTypedRuleContext(Rule_OperandContext,0);
};

Rule_call_OperandContext.prototype.rule_Name_Operand = function() {
    return this.getTypedRuleContext(Rule_Name_OperandContext,0);
};

Rule_call_OperandContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_call_Operand(this);
	}
};

Rule_call_OperandContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_call_Operand(this);
	}
};

Rule_call_OperandContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_call_Operand(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_call_OperandContext = Rule_call_OperandContext;

CdqlParser.prototype.rule_call_Operand = function() {

    var localctx = new Rule_call_OperandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, CdqlParser.RULE_rule_call_Operand);
    try {
        this.state = 370;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 368;
            this.rule_Operand();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 369;
            this.rule_Name_Operand();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_Name_OperandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_Name_Operand;
    return this;
}

Rule_Name_OperandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_Name_OperandContext.prototype.constructor = Rule_Name_OperandContext;

Rule_Name_OperandContext.prototype.ID = function() {
    return this.getToken(CdqlParser.ID, 0);
};

Rule_Name_OperandContext.prototype.COLON = function() {
    return this.getToken(CdqlParser.COLON, 0);
};

Rule_Name_OperandContext.prototype.rule_Operand = function() {
    return this.getTypedRuleContext(Rule_OperandContext,0);
};

Rule_Name_OperandContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_Name_Operand(this);
	}
};

Rule_Name_OperandContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_Name_Operand(this);
	}
};

Rule_Name_OperandContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_Name_Operand(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_Name_OperandContext = Rule_Name_OperandContext;

CdqlParser.prototype.rule_Name_Operand = function() {

    var localctx = new Rule_Name_OperandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, CdqlParser.RULE_rule_Name_Operand);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 372;
        this.match(CdqlParser.ID);
        this.state = 373;
        this.match(CdqlParser.COLON);
        this.state = 374;
        this.rule_Operand();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_FunctionTitleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_FunctionTitle;
    return this;
}

Rule_FunctionTitleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_FunctionTitleContext.prototype.constructor = Rule_FunctionTitleContext;

Rule_FunctionTitleContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CdqlParser.ID);
    } else {
        return this.getToken(CdqlParser.ID, i);
    }
};


Rule_FunctionTitleContext.prototype.DOT = function() {
    return this.getToken(CdqlParser.DOT, 0);
};

Rule_FunctionTitleContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_FunctionTitle(this);
	}
};

Rule_FunctionTitleContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_FunctionTitle(this);
	}
};

Rule_FunctionTitleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_FunctionTitle(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_FunctionTitleContext = Rule_FunctionTitleContext;

CdqlParser.prototype.rule_FunctionTitle = function() {

    var localctx = new Rule_FunctionTitleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, CdqlParser.RULE_rule_FunctionTitle);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 376;
        this.match(CdqlParser.ID);
        this.state = 379;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CdqlParser.DOT) {
            this.state = 377;
            this.match(CdqlParser.DOT);
            this.state = 378;
            this.match(CdqlParser.ID);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_OperandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_Operand;
    return this;
}

Rule_OperandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_OperandContext.prototype.constructor = Rule_OperandContext;

Rule_OperandContext.prototype.rule_EntityTitle = function() {
    return this.getTypedRuleContext(Rule_EntityTitleContext,0);
};

Rule_OperandContext.prototype.rule_Attribute = function() {
    return this.getTypedRuleContext(Rule_AttributeContext,0);
};

Rule_OperandContext.prototype.rule_FunctionCall = function() {
    return this.getTypedRuleContext(Rule_FunctionCallContext,0);
};

Rule_OperandContext.prototype.rule_ContextValue = function() {
    return this.getTypedRuleContext(Rule_ContextValueContext,0);
};

Rule_OperandContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_Operand(this);
	}
};

Rule_OperandContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_Operand(this);
	}
};

Rule_OperandContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_Operand(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_OperandContext = Rule_OperandContext;

CdqlParser.prototype.rule_Operand = function() {

    var localctx = new Rule_OperandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, CdqlParser.RULE_rule_Operand);
    try {
        this.state = 385;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 381;
            this.rule_EntityTitle();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 382;
            this.rule_Attribute();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 383;
            this.rule_FunctionCall();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 384;
            this.rule_ContextValue();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_ContextValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_ContextValue;
    return this;
}

Rule_ContextValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_ContextValueContext.prototype.constructor = Rule_ContextValueContext;

Rule_ContextValueContext.prototype.NUMBER = function() {
    return this.getToken(CdqlParser.NUMBER, 0);
};

Rule_ContextValueContext.prototype.STRING = function() {
    return this.getToken(CdqlParser.STRING, 0);
};

Rule_ContextValueContext.prototype.json = function() {
    return this.getTypedRuleContext(JsonContext,0);
};

Rule_ContextValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_ContextValue(this);
	}
};

Rule_ContextValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_ContextValue(this);
	}
};

Rule_ContextValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_ContextValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_ContextValueContext = Rule_ContextValueContext;

CdqlParser.prototype.rule_ContextValue = function() {

    var localctx = new Rule_ContextValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, CdqlParser.RULE_rule_ContextValue);
    try {
        this.state = 390;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 387;
            this.match(CdqlParser.NUMBER);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 388;
            this.match(CdqlParser.STRING);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 389;
            this.json();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_WhenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_When;
    return this;
}

Rule_WhenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_WhenContext.prototype.constructor = Rule_WhenContext;

Rule_WhenContext.prototype.WHEN = function() {
    return this.getToken(CdqlParser.WHEN, 0);
};

Rule_WhenContext.prototype.rule_Start = function() {
    return this.getTypedRuleContext(Rule_StartContext,0);
};

Rule_WhenContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_When(this);
	}
};

Rule_WhenContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_When(this);
	}
};

Rule_WhenContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_When(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_WhenContext = Rule_WhenContext;

CdqlParser.prototype.rule_When = function() {

    var localctx = new Rule_WhenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, CdqlParser.RULE_rule_When);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 392;
        this.match(CdqlParser.WHEN);
        this.state = 393;
        this.rule_Start();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_repeatContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_repeat;
    return this;
}

Rule_repeatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_repeatContext.prototype.constructor = Rule_repeatContext;

Rule_repeatContext.prototype.EVERY = function() {
    return this.getToken(CdqlParser.EVERY, 0);
};

Rule_repeatContext.prototype.NUMBER = function() {
    return this.getToken(CdqlParser.NUMBER, 0);
};

Rule_repeatContext.prototype.UNIT_OF_TIME = function() {
    return this.getToken(CdqlParser.UNIT_OF_TIME, 0);
};

Rule_repeatContext.prototype.UNTIL = function() {
    return this.getToken(CdqlParser.UNTIL, 0);
};

Rule_repeatContext.prototype.rule_Occurrence = function() {
    return this.getTypedRuleContext(Rule_OccurrenceContext,0);
};

Rule_repeatContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_repeat(this);
	}
};

Rule_repeatContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_repeat(this);
	}
};

Rule_repeatContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_repeat(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_repeatContext = Rule_repeatContext;

CdqlParser.prototype.rule_repeat = function() {

    var localctx = new Rule_repeatContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, CdqlParser.RULE_rule_repeat);
    var _la = 0; // Token type
    try {
        this.state = 405;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CdqlParser.EVERY:
            this.enterOuterAlt(localctx, 1);
            this.state = 395;
            this.match(CdqlParser.EVERY);
            this.state = 396;
            this.match(CdqlParser.NUMBER);
            this.state = 397;
            this.match(CdqlParser.UNIT_OF_TIME);
            this.state = 401;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CdqlParser.UNTIL) {
                this.state = 399;
                this.match(CdqlParser.UNTIL);
                this.state = 400;
                this.rule_Occurrence();
            }

            break;
        case CdqlParser.UNTIL:
            this.enterOuterAlt(localctx, 2);
            this.state = 403;
            this.match(CdqlParser.UNTIL);
            this.state = 404;
            this.rule_Occurrence();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_StartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_Start;
    return this;
}

Rule_StartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_StartContext.prototype.constructor = Rule_StartContext;

Rule_StartContext.prototype.rule_Condition = function() {
    return this.getTypedRuleContext(Rule_ConditionContext,0);
};

Rule_StartContext.prototype.rule_Date_Time_When = function() {
    return this.getTypedRuleContext(Rule_Date_Time_WhenContext,0);
};

Rule_StartContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_Start(this);
	}
};

Rule_StartContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_Start(this);
	}
};

Rule_StartContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_Start(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_StartContext = Rule_StartContext;

CdqlParser.prototype.rule_Start = function() {

    var localctx = new Rule_StartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, CdqlParser.RULE_rule_Start);
    try {
        this.state = 409;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CdqlParser.T__5:
        case CdqlParser.T__7:
        case CdqlParser.T__17:
        case CdqlParser.T__18:
        case CdqlParser.LPAREN:
        case CdqlParser.NOT:
        case CdqlParser.NULL:
        case CdqlParser.STRING:
        case CdqlParser.ID:
        case CdqlParser.NUMBER:
            this.enterOuterAlt(localctx, 1);
            this.state = 407;
            this.rule_Condition(0);
            break;
        case CdqlParser.T__1:
            this.enterOuterAlt(localctx, 2);
            this.state = 408;
            this.rule_Date_Time_When();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_Date_Time_WhenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_Date_Time_When;
    return this;
}

Rule_Date_Time_WhenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_Date_Time_WhenContext.prototype.constructor = Rule_Date_Time_WhenContext;

Rule_Date_Time_WhenContext.prototype.COLON = function() {
    return this.getToken(CdqlParser.COLON, 0);
};

Rule_Date_Time_WhenContext.prototype.rule_Date_Time = function() {
    return this.getTypedRuleContext(Rule_Date_TimeContext,0);
};

Rule_Date_Time_WhenContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_Date_Time_When(this);
	}
};

Rule_Date_Time_WhenContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_Date_Time_When(this);
	}
};

Rule_Date_Time_WhenContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_Date_Time_When(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_Date_Time_WhenContext = Rule_Date_Time_WhenContext;

CdqlParser.prototype.rule_Date_Time_When = function() {

    var localctx = new Rule_Date_Time_WhenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, CdqlParser.RULE_rule_Date_Time_When);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 411;
        this.match(CdqlParser.T__1);
        this.state = 412;
        this.match(CdqlParser.COLON);
        this.state = 413;
        this.rule_Date_Time();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_OccurrenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_Occurrence;
    return this;
}

Rule_OccurrenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_OccurrenceContext.prototype.constructor = Rule_OccurrenceContext;

Rule_OccurrenceContext.prototype.NUMBER = function() {
    return this.getToken(CdqlParser.NUMBER, 0);
};

Rule_OccurrenceContext.prototype.UNIT_OF_TIME = function() {
    return this.getToken(CdqlParser.UNIT_OF_TIME, 0);
};

Rule_OccurrenceContext.prototype.OCCURRENCES = function() {
    return this.getToken(CdqlParser.OCCURRENCES, 0);
};

Rule_OccurrenceContext.prototype.rule_Date_Time = function() {
    return this.getTypedRuleContext(Rule_Date_TimeContext,0);
};

Rule_OccurrenceContext.prototype.LIFETIME = function() {
    return this.getToken(CdqlParser.LIFETIME, 0);
};

Rule_OccurrenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_Occurrence(this);
	}
};

Rule_OccurrenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_Occurrence(this);
	}
};

Rule_OccurrenceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_Occurrence(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_OccurrenceContext = Rule_OccurrenceContext;

CdqlParser.prototype.rule_Occurrence = function() {

    var localctx = new Rule_OccurrenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, CdqlParser.RULE_rule_Occurrence);
    try {
        this.state = 421;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 415;
            this.match(CdqlParser.NUMBER);
            this.state = 416;
            this.match(CdqlParser.UNIT_OF_TIME);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 417;
            this.match(CdqlParser.NUMBER);
            this.state = 418;
            this.match(CdqlParser.OCCURRENCES);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 419;
            this.rule_Date_Time();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 420;
            this.match(CdqlParser.LIFETIME);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_Date_TimeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_Date_Time;
    return this;
}

Rule_Date_TimeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_Date_TimeContext.prototype.constructor = Rule_Date_TimeContext;

Rule_Date_TimeContext.prototype.rule_Date = function() {
    return this.getTypedRuleContext(Rule_DateContext,0);
};

Rule_Date_TimeContext.prototype.rule_Time = function() {
    return this.getTypedRuleContext(Rule_TimeContext,0);
};

Rule_Date_TimeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_Date_Time(this);
	}
};

Rule_Date_TimeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_Date_Time(this);
	}
};

Rule_Date_TimeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_Date_Time(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_Date_TimeContext = Rule_Date_TimeContext;

CdqlParser.prototype.rule_Date_Time = function() {

    var localctx = new Rule_Date_TimeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, CdqlParser.RULE_rule_Date_Time);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 423;
        this.rule_Date();
        this.state = 425;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CdqlParser.NUMBER) {
            this.state = 424;
            this.rule_Time();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_DateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_Date;
    return this;
}

Rule_DateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_DateContext.prototype.constructor = Rule_DateContext;

Rule_DateContext.prototype.NUMBER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CdqlParser.NUMBER);
    } else {
        return this.getToken(CdqlParser.NUMBER, i);
    }
};


Rule_DateContext.prototype.FSLASH = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CdqlParser.FSLASH);
    } else {
        return this.getToken(CdqlParser.FSLASH, i);
    }
};


Rule_DateContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_Date(this);
	}
};

Rule_DateContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_Date(this);
	}
};

Rule_DateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_Date(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_DateContext = Rule_DateContext;

CdqlParser.prototype.rule_Date = function() {

    var localctx = new Rule_DateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, CdqlParser.RULE_rule_Date);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 427;
        this.match(CdqlParser.NUMBER);
        this.state = 428;
        this.match(CdqlParser.FSLASH);
        this.state = 429;
        this.match(CdqlParser.NUMBER);
        this.state = 430;
        this.match(CdqlParser.FSLASH);
        this.state = 431;
        this.match(CdqlParser.NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_TimeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_Time;
    return this;
}

Rule_TimeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_TimeContext.prototype.constructor = Rule_TimeContext;

Rule_TimeContext.prototype.NUMBER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CdqlParser.NUMBER);
    } else {
        return this.getToken(CdqlParser.NUMBER, i);
    }
};


Rule_TimeContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CdqlParser.COLON);
    } else {
        return this.getToken(CdqlParser.COLON, i);
    }
};


Rule_TimeContext.prototype.TIME_ZONE = function() {
    return this.getToken(CdqlParser.TIME_ZONE, 0);
};

Rule_TimeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_Time(this);
	}
};

Rule_TimeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_Time(this);
	}
};

Rule_TimeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_Time(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_TimeContext = Rule_TimeContext;

CdqlParser.prototype.rule_Time = function() {

    var localctx = new Rule_TimeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, CdqlParser.RULE_rule_Time);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 433;
        this.match(CdqlParser.NUMBER);
        this.state = 434;
        this.match(CdqlParser.COLON);
        this.state = 435;
        this.match(CdqlParser.NUMBER);
        this.state = 438;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CdqlParser.COLON) {
            this.state = 436;
            this.match(CdqlParser.COLON);
            this.state = 437;
            this.match(CdqlParser.NUMBER);
        }

        this.state = 441;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CdqlParser.TIME_ZONE) {
            this.state = 440;
            this.match(CdqlParser.TIME_ZONE);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_ConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_Condition;
    return this;
}

Rule_ConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_ConditionContext.prototype.constructor = Rule_ConditionContext;

Rule_ConditionContext.prototype.rule_Constraint = function() {
    return this.getTypedRuleContext(Rule_ConstraintContext,0);
};

Rule_ConditionContext.prototype.LPAREN = function() {
    return this.getToken(CdqlParser.LPAREN, 0);
};

Rule_ConditionContext.prototype.rule_Condition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Rule_ConditionContext);
    } else {
        return this.getTypedRuleContext(Rule_ConditionContext,i);
    }
};

Rule_ConditionContext.prototype.RPAREN = function() {
    return this.getToken(CdqlParser.RPAREN, 0);
};

Rule_ConditionContext.prototype.NOT = function() {
    return this.getToken(CdqlParser.NOT, 0);
};

Rule_ConditionContext.prototype.rule_expr_op = function() {
    return this.getTypedRuleContext(Rule_expr_opContext,0);
};

Rule_ConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_Condition(this);
	}
};

Rule_ConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_Condition(this);
	}
};

Rule_ConditionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_Condition(this);
    } else {
        return visitor.visitChildren(this);
    }
};



CdqlParser.prototype.rule_Condition = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Rule_ConditionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 82;
    this.enterRecursionRule(localctx, 82, CdqlParser.RULE_rule_Condition, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 451;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CdqlParser.T__5:
        case CdqlParser.T__7:
        case CdqlParser.T__17:
        case CdqlParser.T__18:
        case CdqlParser.NULL:
        case CdqlParser.STRING:
        case CdqlParser.ID:
        case CdqlParser.NUMBER:
            this.state = 444;
            this.rule_Constraint();
            break;
        case CdqlParser.LPAREN:
            this.state = 445;
            this.match(CdqlParser.LPAREN);
            this.state = 446;
            this.rule_Condition(0);
            this.state = 447;
            this.match(CdqlParser.RPAREN);
            break;
        case CdqlParser.NOT:
            this.state = 449;
            this.match(CdqlParser.NOT);
            this.state = 450;
            this.rule_Condition(1);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 459;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,29,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new Rule_ConditionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CdqlParser.RULE_rule_Condition);
                this.state = 453;
                if (!( this.precpred(this._ctx, 3))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                }
                this.state = 454;
                this.rule_expr_op();
                this.state = 455;
                this.rule_Condition(4); 
            }
            this.state = 461;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,29,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function Rule_expr_opContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_expr_op;
    return this;
}

Rule_expr_opContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_expr_opContext.prototype.constructor = Rule_expr_opContext;

Rule_expr_opContext.prototype.AND = function() {
    return this.getToken(CdqlParser.AND, 0);
};

Rule_expr_opContext.prototype.XOR = function() {
    return this.getToken(CdqlParser.XOR, 0);
};

Rule_expr_opContext.prototype.OR = function() {
    return this.getToken(CdqlParser.OR, 0);
};

Rule_expr_opContext.prototype.NOT = function() {
    return this.getToken(CdqlParser.NOT, 0);
};

Rule_expr_opContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_expr_op(this);
	}
};

Rule_expr_opContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_expr_op(this);
	}
};

Rule_expr_opContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_expr_op(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_expr_opContext = Rule_expr_opContext;

CdqlParser.prototype.rule_expr_op = function() {

    var localctx = new Rule_expr_opContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, CdqlParser.RULE_rule_expr_op);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 462;
        _la = this._input.LA(1);
        if(!(((((_la - 45)) & ~0x1f) == 0 && ((1 << (_la - 45)) & ((1 << (CdqlParser.NOT - 45)) | (1 << (CdqlParser.AND - 45)) | (1 << (CdqlParser.OR - 45)) | (1 << (CdqlParser.XOR - 45)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_ConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_Constraint;
    return this;
}

Rule_ConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_ConstraintContext.prototype.constructor = Rule_ConstraintContext;

Rule_ConstraintContext.prototype.rule_left_element = function() {
    return this.getTypedRuleContext(Rule_left_elementContext,0);
};

Rule_ConstraintContext.prototype.rule_relational_op_func = function() {
    return this.getTypedRuleContext(Rule_relational_op_funcContext,0);
};

Rule_ConstraintContext.prototype.rule_right_element = function() {
    return this.getTypedRuleContext(Rule_right_elementContext,0);
};

Rule_ConstraintContext.prototype.rule_target_element = function() {
    return this.getTypedRuleContext(Rule_target_elementContext,0);
};

Rule_ConstraintContext.prototype.rule_between_op = function() {
    return this.getTypedRuleContext(Rule_between_opContext,0);
};

Rule_ConstraintContext.prototype.AND = function() {
    return this.getToken(CdqlParser.AND, 0);
};

Rule_ConstraintContext.prototype.rule_is_or_is_not = function() {
    return this.getTypedRuleContext(Rule_is_or_is_notContext,0);
};

Rule_ConstraintContext.prototype.NULL = function() {
    return this.getToken(CdqlParser.NULL, 0);
};

Rule_ConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_Constraint(this);
	}
};

Rule_ConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_Constraint(this);
	}
};

Rule_ConstraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_Constraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_ConstraintContext = Rule_ConstraintContext;

CdqlParser.prototype.rule_Constraint = function() {

    var localctx = new Rule_ConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, CdqlParser.RULE_rule_Constraint);
    try {
        this.state = 478;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 464;
            this.rule_left_element();
            this.state = 465;
            this.rule_relational_op_func();
            this.state = 466;
            this.rule_right_element();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 468;
            this.rule_target_element();
            this.state = 469;
            this.rule_between_op();
            this.state = 470;
            this.rule_left_element();
            this.state = 471;
            this.match(CdqlParser.AND);
            this.state = 472;
            this.rule_right_element();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 474;
            this.rule_target_element();
            this.state = 475;
            this.rule_is_or_is_not();
            this.state = 476;
            this.match(CdqlParser.NULL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_left_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_left_element;
    return this;
}

Rule_left_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_left_elementContext.prototype.constructor = Rule_left_elementContext;

Rule_left_elementContext.prototype.rule_Operand = function() {
    return this.getTypedRuleContext(Rule_OperandContext,0);
};

Rule_left_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_left_element(this);
	}
};

Rule_left_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_left_element(this);
	}
};

Rule_left_elementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_left_element(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_left_elementContext = Rule_left_elementContext;

CdqlParser.prototype.rule_left_element = function() {

    var localctx = new Rule_left_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, CdqlParser.RULE_rule_left_element);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 480;
        this.rule_Operand();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_right_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_right_element;
    return this;
}

Rule_right_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_right_elementContext.prototype.constructor = Rule_right_elementContext;

Rule_right_elementContext.prototype.rule_Operand = function() {
    return this.getTypedRuleContext(Rule_OperandContext,0);
};

Rule_right_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_right_element(this);
	}
};

Rule_right_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_right_element(this);
	}
};

Rule_right_elementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_right_element(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_right_elementContext = Rule_right_elementContext;

CdqlParser.prototype.rule_right_element = function() {

    var localctx = new Rule_right_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, CdqlParser.RULE_rule_right_element);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 482;
        this.rule_Operand();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_target_elementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_target_element;
    return this;
}

Rule_target_elementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_target_elementContext.prototype.constructor = Rule_target_elementContext;

Rule_target_elementContext.prototype.rule_Operand = function() {
    return this.getTypedRuleContext(Rule_OperandContext,0);
};

Rule_target_elementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_target_element(this);
	}
};

Rule_target_elementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_target_element(this);
	}
};

Rule_target_elementContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_target_element(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_target_elementContext = Rule_target_elementContext;

CdqlParser.prototype.rule_target_element = function() {

    var localctx = new Rule_target_elementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, CdqlParser.RULE_rule_target_element);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 484;
        this.rule_Operand();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_relational_op_funcContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_relational_op_func;
    return this;
}

Rule_relational_op_funcContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_relational_op_funcContext.prototype.constructor = Rule_relational_op_funcContext;

Rule_relational_op_funcContext.prototype.rule_relational_op = function() {
    return this.getTypedRuleContext(Rule_relational_opContext,0);
};

Rule_relational_op_funcContext.prototype.OP = function() {
    return this.getToken(CdqlParser.OP, 0);
};

Rule_relational_op_funcContext.prototype.LPAREN = function() {
    return this.getToken(CdqlParser.LPAREN, 0);
};

Rule_relational_op_funcContext.prototype.COMMA = function() {
    return this.getToken(CdqlParser.COMMA, 0);
};

Rule_relational_op_funcContext.prototype.NUMBER = function() {
    return this.getToken(CdqlParser.NUMBER, 0);
};

Rule_relational_op_funcContext.prototype.RPAREN = function() {
    return this.getToken(CdqlParser.RPAREN, 0);
};

Rule_relational_op_funcContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_relational_op_func(this);
	}
};

Rule_relational_op_funcContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_relational_op_func(this);
	}
};

Rule_relational_op_funcContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_relational_op_func(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_relational_op_funcContext = Rule_relational_op_funcContext;

CdqlParser.prototype.rule_relational_op_func = function() {

    var localctx = new Rule_relational_op_funcContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, CdqlParser.RULE_rule_relational_op_func);
    try {
        this.state = 494;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CdqlParser.CONTAINS_ANY:
        case CdqlParser.CONTAINS_ALL:
        case CdqlParser.EQ:
        case CdqlParser.LTH:
        case CdqlParser.GTH:
        case CdqlParser.LET:
        case CdqlParser.GET:
        case CdqlParser.NOT_EQ:
            this.enterOuterAlt(localctx, 1);
            this.state = 486;
            this.rule_relational_op();
            break;
        case CdqlParser.OP:
            this.enterOuterAlt(localctx, 2);
            this.state = 487;
            this.match(CdqlParser.OP);
            this.state = 488;
            this.match(CdqlParser.LPAREN);
            this.state = 489;
            this.rule_relational_op();
            this.state = 490;
            this.match(CdqlParser.COMMA);
            this.state = 491;
            this.match(CdqlParser.NUMBER);
            this.state = 492;
            this.match(CdqlParser.RPAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_relational_opContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_relational_op;
    return this;
}

Rule_relational_opContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_relational_opContext.prototype.constructor = Rule_relational_opContext;

Rule_relational_opContext.prototype.EQ = function() {
    return this.getToken(CdqlParser.EQ, 0);
};

Rule_relational_opContext.prototype.LTH = function() {
    return this.getToken(CdqlParser.LTH, 0);
};

Rule_relational_opContext.prototype.NOT_EQ = function() {
    return this.getToken(CdqlParser.NOT_EQ, 0);
};

Rule_relational_opContext.prototype.GTH = function() {
    return this.getToken(CdqlParser.GTH, 0);
};

Rule_relational_opContext.prototype.LET = function() {
    return this.getToken(CdqlParser.LET, 0);
};

Rule_relational_opContext.prototype.GET = function() {
    return this.getToken(CdqlParser.GET, 0);
};

Rule_relational_opContext.prototype.CONTAINS_ANY = function() {
    return this.getToken(CdqlParser.CONTAINS_ANY, 0);
};

Rule_relational_opContext.prototype.CONTAINS_ALL = function() {
    return this.getToken(CdqlParser.CONTAINS_ALL, 0);
};

Rule_relational_opContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_relational_op(this);
	}
};

Rule_relational_opContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_relational_op(this);
	}
};

Rule_relational_opContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_relational_op(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_relational_opContext = Rule_relational_opContext;

CdqlParser.prototype.rule_relational_op = function() {

    var localctx = new Rule_relational_opContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, CdqlParser.RULE_rule_relational_op);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 496;
        _la = this._input.LA(1);
        if(!(((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (CdqlParser.CONTAINS_ANY - 50)) | (1 << (CdqlParser.CONTAINS_ALL - 50)) | (1 << (CdqlParser.EQ - 50)) | (1 << (CdqlParser.LTH - 50)) | (1 << (CdqlParser.GTH - 50)) | (1 << (CdqlParser.LET - 50)) | (1 << (CdqlParser.GET - 50)) | (1 << (CdqlParser.NOT_EQ - 50)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_between_opContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_between_op;
    return this;
}

Rule_between_opContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_between_opContext.prototype.constructor = Rule_between_opContext;

Rule_between_opContext.prototype.BETWEEN = function() {
    return this.getToken(CdqlParser.BETWEEN, 0);
};

Rule_between_opContext.prototype.OP = function() {
    return this.getToken(CdqlParser.OP, 0);
};

Rule_between_opContext.prototype.LPAREN = function() {
    return this.getToken(CdqlParser.LPAREN, 0);
};

Rule_between_opContext.prototype.COMMA = function() {
    return this.getToken(CdqlParser.COMMA, 0);
};

Rule_between_opContext.prototype.NUMBER = function() {
    return this.getToken(CdqlParser.NUMBER, 0);
};

Rule_between_opContext.prototype.RPAREN = function() {
    return this.getToken(CdqlParser.RPAREN, 0);
};

Rule_between_opContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_between_op(this);
	}
};

Rule_between_opContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_between_op(this);
	}
};

Rule_between_opContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_between_op(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_between_opContext = Rule_between_opContext;

CdqlParser.prototype.rule_between_op = function() {

    var localctx = new Rule_between_opContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, CdqlParser.RULE_rule_between_op);
    try {
        this.state = 505;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CdqlParser.BETWEEN:
            this.enterOuterAlt(localctx, 1);
            this.state = 498;
            this.match(CdqlParser.BETWEEN);
            break;
        case CdqlParser.OP:
            this.enterOuterAlt(localctx, 2);
            this.state = 499;
            this.match(CdqlParser.OP);
            this.state = 500;
            this.match(CdqlParser.LPAREN);
            this.state = 501;
            this.match(CdqlParser.BETWEEN);
            this.state = 502;
            this.match(CdqlParser.COMMA);
            this.state = 503;
            this.match(CdqlParser.NUMBER);
            this.state = 504;
            this.match(CdqlParser.RPAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_is_or_is_notContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_is_or_is_not;
    return this;
}

Rule_is_or_is_notContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_is_or_is_notContext.prototype.constructor = Rule_is_or_is_notContext;

Rule_is_or_is_notContext.prototype.IS = function() {
    return this.getToken(CdqlParser.IS, 0);
};

Rule_is_or_is_notContext.prototype.NOT = function() {
    return this.getToken(CdqlParser.NOT, 0);
};

Rule_is_or_is_notContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_is_or_is_not(this);
	}
};

Rule_is_or_is_notContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_is_or_is_not(this);
	}
};

Rule_is_or_is_notContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_is_or_is_not(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_is_or_is_notContext = Rule_is_or_is_notContext;

CdqlParser.prototype.rule_is_or_is_not = function() {

    var localctx = new Rule_is_or_is_notContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, CdqlParser.RULE_rule_is_or_is_not);
    try {
        this.state = 510;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 507;
            this.match(CdqlParser.IS);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 508;
            this.match(CdqlParser.IS);
            this.state = 509;
            this.match(CdqlParser.NOT);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Ruel_PushContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_ruel_Push;
    return this;
}

Ruel_PushContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Ruel_PushContext.prototype.constructor = Ruel_PushContext;

Ruel_PushContext.prototype.PUSH = function() {
    return this.getToken(CdqlParser.PUSH, 0);
};

Ruel_PushContext.prototype.rule_Select = function() {
    return this.getTypedRuleContext(Rule_SelectContext,0);
};

Ruel_PushContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRuel_Push(this);
	}
};

Ruel_PushContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRuel_Push(this);
	}
};

Ruel_PushContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRuel_Push(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Ruel_PushContext = Ruel_PushContext;

CdqlParser.prototype.ruel_Push = function() {

    var localctx = new Ruel_PushContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, CdqlParser.RULE_ruel_Push);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 512;
        this.match(CdqlParser.PUSH);
        this.state = 513;
        this.rule_Select();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_callbackContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_callback;
    return this;
}

Rule_callbackContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_callbackContext.prototype.constructor = Rule_callbackContext;

Rule_callbackContext.prototype.rule_http_calback = function() {
    return this.getTypedRuleContext(Rule_http_calbackContext,0);
};

Rule_callbackContext.prototype.rule_fcm_calback = function() {
    return this.getTypedRuleContext(Rule_fcm_calbackContext,0);
};

Rule_callbackContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_callback(this);
	}
};

Rule_callbackContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_callback(this);
	}
};

Rule_callbackContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_callback(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_callbackContext = Rule_callbackContext;

CdqlParser.prototype.rule_callback = function() {

    var localctx = new Rule_callbackContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, CdqlParser.RULE_rule_callback);
    try {
        this.state = 517;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 515;
            this.rule_http_calback();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 516;
            this.rule_fcm_calback();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_http_calbackContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_http_calback;
    return this;
}

Rule_http_calbackContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_http_calbackContext.prototype.constructor = Rule_http_calbackContext;

Rule_http_calbackContext.prototype.METHOD = function() {
    return this.getToken(CdqlParser.METHOD, 0);
};

Rule_http_calbackContext.prototype.EQ = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CdqlParser.EQ);
    } else {
        return this.getToken(CdqlParser.EQ, i);
    }
};


Rule_http_calbackContext.prototype.HTTPPOST = function() {
    return this.getToken(CdqlParser.HTTPPOST, 0);
};

Rule_http_calbackContext.prototype.URL = function() {
    return this.getToken(CdqlParser.URL, 0);
};

Rule_http_calbackContext.prototype.rule_callback_url = function() {
    return this.getTypedRuleContext(Rule_callback_urlContext,0);
};

Rule_http_calbackContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_http_calback(this);
	}
};

Rule_http_calbackContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_http_calback(this);
	}
};

Rule_http_calbackContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_http_calback(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_http_calbackContext = Rule_http_calbackContext;

CdqlParser.prototype.rule_http_calback = function() {

    var localctx = new Rule_http_calbackContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, CdqlParser.RULE_rule_http_calback);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 519;
        this.match(CdqlParser.METHOD);
        this.state = 520;
        this.match(CdqlParser.EQ);
        this.state = 521;
        this.match(CdqlParser.HTTPPOST);
        this.state = 522;
        this.match(CdqlParser.URL);
        this.state = 523;
        this.match(CdqlParser.EQ);
        this.state = 524;
        this.rule_callback_url();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_fcm_calbackContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_fcm_calback;
    return this;
}

Rule_fcm_calbackContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_fcm_calbackContext.prototype.constructor = Rule_fcm_calbackContext;

Rule_fcm_calbackContext.prototype.METHOD = function() {
    return this.getToken(CdqlParser.METHOD, 0);
};

Rule_fcm_calbackContext.prototype.EQ = function() {
    return this.getToken(CdqlParser.EQ, 0);
};

Rule_fcm_calbackContext.prototype.FCM = function() {
    return this.getToken(CdqlParser.FCM, 0);
};

Rule_fcm_calbackContext.prototype.rule_fcm_topic = function() {
    return this.getTypedRuleContext(Rule_fcm_topicContext,0);
};

Rule_fcm_calbackContext.prototype.rule_fcm_token = function() {
    return this.getTypedRuleContext(Rule_fcm_tokenContext,0);
};

Rule_fcm_calbackContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_fcm_calback(this);
	}
};

Rule_fcm_calbackContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_fcm_calback(this);
	}
};

Rule_fcm_calbackContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_fcm_calback(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_fcm_calbackContext = Rule_fcm_calbackContext;

CdqlParser.prototype.rule_fcm_calback = function() {

    var localctx = new Rule_fcm_calbackContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, CdqlParser.RULE_rule_fcm_calback);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 526;
        this.match(CdqlParser.METHOD);
        this.state = 527;
        this.match(CdqlParser.EQ);
        this.state = 528;
        this.match(CdqlParser.FCM);
        this.state = 531;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CdqlParser.TOPIC:
            this.state = 529;
            this.rule_fcm_topic();
            break;
        case CdqlParser.TOKEN:
            this.state = 530;
            this.rule_fcm_token();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_fcm_topicContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_fcm_topic;
    return this;
}

Rule_fcm_topicContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_fcm_topicContext.prototype.constructor = Rule_fcm_topicContext;

Rule_fcm_topicContext.prototype.TOPIC = function() {
    return this.getToken(CdqlParser.TOPIC, 0);
};

Rule_fcm_topicContext.prototype.EQ = function() {
    return this.getToken(CdqlParser.EQ, 0);
};

Rule_fcm_topicContext.prototype.STRING = function() {
    return this.getToken(CdqlParser.STRING, 0);
};

Rule_fcm_topicContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_fcm_topic(this);
	}
};

Rule_fcm_topicContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_fcm_topic(this);
	}
};

Rule_fcm_topicContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_fcm_topic(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_fcm_topicContext = Rule_fcm_topicContext;

CdqlParser.prototype.rule_fcm_topic = function() {

    var localctx = new Rule_fcm_topicContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, CdqlParser.RULE_rule_fcm_topic);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 533;
        this.match(CdqlParser.TOPIC);
        this.state = 534;
        this.match(CdqlParser.EQ);
        this.state = 535;
        this.match(CdqlParser.STRING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_fcm_tokenContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_fcm_token;
    return this;
}

Rule_fcm_tokenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_fcm_tokenContext.prototype.constructor = Rule_fcm_tokenContext;

Rule_fcm_tokenContext.prototype.TOKEN = function() {
    return this.getToken(CdqlParser.TOKEN, 0);
};

Rule_fcm_tokenContext.prototype.EQ = function() {
    return this.getToken(CdqlParser.EQ, 0);
};

Rule_fcm_tokenContext.prototype.STRING = function() {
    return this.getToken(CdqlParser.STRING, 0);
};

Rule_fcm_tokenContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_fcm_token(this);
	}
};

Rule_fcm_tokenContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_fcm_token(this);
	}
};

Rule_fcm_tokenContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_fcm_token(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_fcm_tokenContext = Rule_fcm_tokenContext;

CdqlParser.prototype.rule_fcm_token = function() {

    var localctx = new Rule_fcm_tokenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, CdqlParser.RULE_rule_fcm_token);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 537;
        this.match(CdqlParser.TOKEN);
        this.state = 538;
        this.match(CdqlParser.EQ);
        this.state = 539;
        this.match(CdqlParser.STRING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_callback_urlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_callback_url;
    return this;
}

Rule_callback_urlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_callback_urlContext.prototype.constructor = Rule_callback_urlContext;

Rule_callback_urlContext.prototype.rule_url = function() {
    return this.getTypedRuleContext(Rule_urlContext,0);
};

Rule_callback_urlContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_callback_url(this);
	}
};

Rule_callback_urlContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_callback_url(this);
	}
};

Rule_callback_urlContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_callback_url(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_callback_urlContext = Rule_callback_urlContext;

CdqlParser.prototype.rule_callback_url = function() {

    var localctx = new Rule_callback_urlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, CdqlParser.RULE_rule_callback_url);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 541;
        this.rule_url();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_DefineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_Define;
    return this;
}

Rule_DefineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_DefineContext.prototype.constructor = Rule_DefineContext;

Rule_DefineContext.prototype.DEFINE = function() {
    return this.getToken(CdqlParser.DEFINE, 0);
};

Rule_DefineContext.prototype.rule_Define_Context_Entity = function() {
    return this.getTypedRuleContext(Rule_Define_Context_EntityContext,0);
};

Rule_DefineContext.prototype.COMMA = function() {
    return this.getToken(CdqlParser.COMMA, 0);
};

Rule_DefineContext.prototype.rule_Define_Context_Function = function() {
    return this.getTypedRuleContext(Rule_Define_Context_FunctionContext,0);
};

Rule_DefineContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_Define(this);
	}
};

Rule_DefineContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_Define(this);
	}
};

Rule_DefineContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_Define(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_DefineContext = Rule_DefineContext;

CdqlParser.prototype.rule_Define = function() {

    var localctx = new Rule_DefineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, CdqlParser.RULE_rule_Define);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 543;
        this.match(CdqlParser.DEFINE);
        this.state = 544;
        this.rule_Define_Context_Entity();
        this.state = 547;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CdqlParser.COMMA) {
            this.state = 545;
            this.match(CdqlParser.COMMA);
            this.state = 546;
            this.rule_Define_Context_Function();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_Define_Context_EntityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_Define_Context_Entity;
    return this;
}

Rule_Define_Context_EntityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_Define_Context_EntityContext.prototype.constructor = Rule_Define_Context_EntityContext;

Rule_Define_Context_EntityContext.prototype.rule_context_entity = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Rule_context_entityContext);
    } else {
        return this.getTypedRuleContext(Rule_context_entityContext,i);
    }
};

Rule_Define_Context_EntityContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CdqlParser.COMMA);
    } else {
        return this.getToken(CdqlParser.COMMA, i);
    }
};


Rule_Define_Context_EntityContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_Define_Context_Entity(this);
	}
};

Rule_Define_Context_EntityContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_Define_Context_Entity(this);
	}
};

Rule_Define_Context_EntityContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_Define_Context_Entity(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_Define_Context_EntityContext = Rule_Define_Context_EntityContext;

CdqlParser.prototype.rule_Define_Context_Entity = function() {

    var localctx = new Rule_Define_Context_EntityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, CdqlParser.RULE_rule_Define_Context_Entity);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 549;
        this.rule_context_entity();
        this.state = 554;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,37,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 550;
                this.match(CdqlParser.COMMA);
                this.state = 551;
                this.rule_context_entity(); 
            }
            this.state = 556;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,37,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_context_entityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_context_entity;
    return this;
}

Rule_context_entityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_context_entityContext.prototype.constructor = Rule_context_entityContext;

Rule_context_entityContext.prototype.ENTITY = function() {
    return this.getToken(CdqlParser.ENTITY, 0);
};

Rule_context_entityContext.prototype.rule_entity_id = function() {
    return this.getTypedRuleContext(Rule_entity_idContext,0);
};

Rule_context_entityContext.prototype.IS_FROM = function() {
    return this.getToken(CdqlParser.IS_FROM, 0);
};

Rule_context_entityContext.prototype.rule_entity_type = function() {
    return this.getTypedRuleContext(Rule_entity_typeContext,0);
};

Rule_context_entityContext.prototype.WHERE = function() {
    return this.getToken(CdqlParser.WHERE, 0);
};

Rule_context_entityContext.prototype.rule_Condition = function() {
    return this.getTypedRuleContext(Rule_ConditionContext,0);
};

Rule_context_entityContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_context_entity(this);
	}
};

Rule_context_entityContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_context_entity(this);
	}
};

Rule_context_entityContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_context_entity(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_context_entityContext = Rule_context_entityContext;

CdqlParser.prototype.rule_context_entity = function() {

    var localctx = new Rule_context_entityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, CdqlParser.RULE_rule_context_entity);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 557;
        this.match(CdqlParser.ENTITY);
        this.state = 558;
        this.rule_entity_id();
        this.state = 559;
        this.match(CdqlParser.IS_FROM);
        this.state = 560;
        this.rule_entity_type();
        this.state = 563;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CdqlParser.WHERE) {
            this.state = 561;
            this.match(CdqlParser.WHERE);
            this.state = 562;
            this.rule_Condition(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_entity_typeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_entity_type;
    return this;
}

Rule_entity_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_entity_typeContext.prototype.constructor = Rule_entity_typeContext;

Rule_entity_typeContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CdqlParser.ID);
    } else {
        return this.getToken(CdqlParser.ID, i);
    }
};


Rule_entity_typeContext.prototype.COLON = function() {
    return this.getToken(CdqlParser.COLON, 0);
};

Rule_entity_typeContext.prototype.DOT = function() {
    return this.getToken(CdqlParser.DOT, 0);
};

Rule_entity_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_entity_type(this);
	}
};

Rule_entity_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_entity_type(this);
	}
};

Rule_entity_typeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_entity_type(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_entity_typeContext = Rule_entity_typeContext;

CdqlParser.prototype.rule_entity_type = function() {

    var localctx = new Rule_entity_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, CdqlParser.RULE_rule_entity_type);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 567;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
        if(la_===1) {
            this.state = 565;
            this.match(CdqlParser.ID);
            this.state = 566;
            this.match(CdqlParser.COLON);

        }
        this.state = 569;
        this.match(CdqlParser.ID);
        this.state = 572;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CdqlParser.DOT) {
            this.state = 570;
            this.match(CdqlParser.DOT);
            this.state = 571;
            this.match(CdqlParser.ID);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_Define_Context_FunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_Define_Context_Function;
    return this;
}

Rule_Define_Context_FunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_Define_Context_FunctionContext.prototype.constructor = Rule_Define_Context_FunctionContext;

Rule_Define_Context_FunctionContext.prototype.rule_context_function = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Rule_context_functionContext);
    } else {
        return this.getTypedRuleContext(Rule_context_functionContext,i);
    }
};

Rule_Define_Context_FunctionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CdqlParser.COMMA);
    } else {
        return this.getToken(CdqlParser.COMMA, i);
    }
};


Rule_Define_Context_FunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_Define_Context_Function(this);
	}
};

Rule_Define_Context_FunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_Define_Context_Function(this);
	}
};

Rule_Define_Context_FunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_Define_Context_Function(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_Define_Context_FunctionContext = Rule_Define_Context_FunctionContext;

CdqlParser.prototype.rule_Define_Context_Function = function() {

    var localctx = new Rule_Define_Context_FunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, CdqlParser.RULE_rule_Define_Context_Function);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 574;
        this.rule_context_function();
        this.state = 579;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CdqlParser.COMMA) {
            this.state = 575;
            this.match(CdqlParser.COMMA);
            this.state = 576;
            this.rule_context_function();
            this.state = 581;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_context_functionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_context_function;
    return this;
}

Rule_context_functionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_context_functionContext.prototype.constructor = Rule_context_functionContext;

Rule_context_functionContext.prototype.rule_aFunction = function() {
    return this.getTypedRuleContext(Rule_aFunctionContext,0);
};

Rule_context_functionContext.prototype.rule_sFunction = function() {
    return this.getTypedRuleContext(Rule_sFunctionContext,0);
};

Rule_context_functionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_context_function(this);
	}
};

Rule_context_functionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_context_function(this);
	}
};

Rule_context_functionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_context_function(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_context_functionContext = Rule_context_functionContext;

CdqlParser.prototype.rule_context_function = function() {

    var localctx = new Rule_context_functionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, CdqlParser.RULE_rule_context_function);
    try {
        this.state = 584;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CdqlParser.T__2:
            this.enterOuterAlt(localctx, 1);
            this.state = 582;
            this.rule_aFunction();
            break;
        case CdqlParser.T__3:
            this.enterOuterAlt(localctx, 2);
            this.state = 583;
            this.rule_sFunction();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_aFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_aFunction;
    return this;
}

Rule_aFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_aFunctionContext.prototype.constructor = Rule_aFunctionContext;

Rule_aFunctionContext.prototype.rule_function_id = function() {
    return this.getTypedRuleContext(Rule_function_idContext,0);
};

Rule_aFunctionContext.prototype.rule_url = function() {
    return this.getTypedRuleContext(Rule_urlContext,0);
};

Rule_aFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_aFunction(this);
	}
};

Rule_aFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_aFunction(this);
	}
};

Rule_aFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_aFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_aFunctionContext = Rule_aFunctionContext;

CdqlParser.prototype.rule_aFunction = function() {

    var localctx = new Rule_aFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, CdqlParser.RULE_rule_aFunction);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 586;
        this.match(CdqlParser.T__2);
        this.state = 587;
        this.rule_function_id();
        this.state = 588;
        this.rule_url();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_sFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_sFunction;
    return this;
}

Rule_sFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_sFunctionContext.prototype.constructor = Rule_sFunctionContext;

Rule_sFunctionContext.prototype.rule_function_id = function() {
    return this.getTypedRuleContext(Rule_function_idContext,0);
};

Rule_sFunctionContext.prototype.rule_is_on = function() {
    return this.getTypedRuleContext(Rule_is_onContext,0);
};

Rule_sFunctionContext.prototype.cst_situation_def_rule = function() {
    return this.getTypedRuleContext(Cst_situation_def_ruleContext,0);
};

Rule_sFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_sFunction(this);
	}
};

Rule_sFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_sFunction(this);
	}
};

Rule_sFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_sFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_sFunctionContext = Rule_sFunctionContext;

CdqlParser.prototype.rule_sFunction = function() {

    var localctx = new Rule_sFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, CdqlParser.RULE_rule_sFunction);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 590;
        this.match(CdqlParser.T__3);
        this.state = 591;
        this.rule_function_id();
        this.state = 592;
        this.rule_is_on();

        this.state = 593;
        this.cst_situation_def_rule();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_is_onContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_is_on;
    return this;
}

Rule_is_onContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_is_onContext.prototype.constructor = Rule_is_onContext;

Rule_is_onContext.prototype.rule_is_on_entity = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Rule_is_on_entityContext);
    } else {
        return this.getTypedRuleContext(Rule_is_on_entityContext,i);
    }
};

Rule_is_onContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CdqlParser.COMMA);
    } else {
        return this.getToken(CdqlParser.COMMA, i);
    }
};


Rule_is_onContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_is_on(this);
	}
};

Rule_is_onContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_is_on(this);
	}
};

Rule_is_onContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_is_on(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_is_onContext = Rule_is_onContext;

CdqlParser.prototype.rule_is_on = function() {

    var localctx = new Rule_is_onContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, CdqlParser.RULE_rule_is_on);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 595;
        this.match(CdqlParser.T__4);
        this.state = 596;
        this.rule_is_on_entity();
        this.state = 601;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CdqlParser.COMMA) {
            this.state = 597;
            this.match(CdqlParser.COMMA);
            this.state = 598;
            this.rule_is_on_entity();
            this.state = 603;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_is_on_entityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_is_on_entity;
    return this;
}

Rule_is_on_entityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_is_on_entityContext.prototype.constructor = Rule_is_on_entityContext;

Rule_is_on_entityContext.prototype.rule_entity_type = function() {
    return this.getTypedRuleContext(Rule_entity_typeContext,0);
};

Rule_is_on_entityContext.prototype.AS = function() {
    return this.getToken(CdqlParser.AS, 0);
};

Rule_is_on_entityContext.prototype.ID = function() {
    return this.getToken(CdqlParser.ID, 0);
};

Rule_is_on_entityContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_is_on_entity(this);
	}
};

Rule_is_on_entityContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_is_on_entity(this);
	}
};

Rule_is_on_entityContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_is_on_entity(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_is_on_entityContext = Rule_is_on_entityContext;

CdqlParser.prototype.rule_is_on_entity = function() {

    var localctx = new Rule_is_on_entityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, CdqlParser.RULE_rule_is_on_entity);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 604;
        this.rule_entity_type();
        this.state = 605;
        this.match(CdqlParser.AS);
        this.state = 606;
        this.match(CdqlParser.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cst_situation_def_ruleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_cst_situation_def_rule;
    return this;
}

Cst_situation_def_ruleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cst_situation_def_ruleContext.prototype.constructor = Cst_situation_def_ruleContext;

Cst_situation_def_ruleContext.prototype.rule_single_situatuin = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Rule_single_situatuinContext);
    } else {
        return this.getTypedRuleContext(Rule_single_situatuinContext,i);
    }
};

Cst_situation_def_ruleContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CdqlParser.COMMA);
    } else {
        return this.getToken(CdqlParser.COMMA, i);
    }
};


Cst_situation_def_ruleContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterCst_situation_def_rule(this);
	}
};

Cst_situation_def_ruleContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitCst_situation_def_rule(this);
	}
};

Cst_situation_def_ruleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitCst_situation_def_rule(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Cst_situation_def_ruleContext = Cst_situation_def_ruleContext;

CdqlParser.prototype.cst_situation_def_rule = function() {

    var localctx = new Cst_situation_def_ruleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, CdqlParser.RULE_cst_situation_def_rule);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 608;
        this.match(CdqlParser.T__5);
        this.state = 609;
        this.rule_single_situatuin();
        this.state = 614;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CdqlParser.COMMA) {
            this.state = 610;
            this.match(CdqlParser.COMMA);
            this.state = 611;
            this.rule_single_situatuin();
            this.state = 616;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 617;
        this.match(CdqlParser.T__6);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_single_situatuinContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_single_situatuin;
    return this;
}

Rule_single_situatuinContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_single_situatuinContext.prototype.constructor = Rule_single_situatuinContext;

Rule_single_situatuinContext.prototype.STRING = function() {
    return this.getToken(CdqlParser.STRING, 0);
};

Rule_single_situatuinContext.prototype.COLON = function() {
    return this.getToken(CdqlParser.COLON, 0);
};

Rule_single_situatuinContext.prototype.rule_situation_pair = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Rule_situation_pairContext);
    } else {
        return this.getTypedRuleContext(Rule_situation_pairContext,i);
    }
};

Rule_single_situatuinContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CdqlParser.COMMA);
    } else {
        return this.getToken(CdqlParser.COMMA, i);
    }
};


Rule_single_situatuinContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_single_situatuin(this);
	}
};

Rule_single_situatuinContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_single_situatuin(this);
	}
};

Rule_single_situatuinContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_single_situatuin(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_single_situatuinContext = Rule_single_situatuinContext;

CdqlParser.prototype.rule_single_situatuin = function() {

    var localctx = new Rule_single_situatuinContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, CdqlParser.RULE_rule_single_situatuin);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 619;
        this.match(CdqlParser.STRING);
        this.state = 620;
        this.match(CdqlParser.COLON);
        this.state = 621;
        this.match(CdqlParser.T__5);
        this.state = 622;
        this.rule_situation_pair();
        this.state = 627;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CdqlParser.COMMA) {
            this.state = 623;
            this.match(CdqlParser.COMMA);
            this.state = 624;
            this.rule_situation_pair();
            this.state = 629;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 630;
        this.match(CdqlParser.T__6);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_situation_pairContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_situation_pair;
    return this;
}

Rule_situation_pairContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_situation_pairContext.prototype.constructor = Rule_situation_pairContext;

Rule_situation_pairContext.prototype.rule_situation_attributes = function() {
    return this.getTypedRuleContext(Rule_situation_attributesContext,0);
};

Rule_situation_pairContext.prototype.situation_pair_values = function() {
    return this.getTypedRuleContext(Situation_pair_valuesContext,0);
};

Rule_situation_pairContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_situation_pair(this);
	}
};

Rule_situation_pairContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_situation_pair(this);
	}
};

Rule_situation_pairContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_situation_pair(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_situation_pairContext = Rule_situation_pairContext;

CdqlParser.prototype.rule_situation_pair = function() {

    var localctx = new Rule_situation_pairContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, CdqlParser.RULE_rule_situation_pair);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 632;
        this.rule_situation_attributes();
        this.state = 633;
        this.match(CdqlParser.COLON);
        this.state = 634;
        this.match(CdqlParser.T__5);
        this.state = 635;
        this.situation_pair_values();
        this.state = 636;
        this.match(CdqlParser.T__6);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_situation_attributesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_situation_attributes;
    return this;
}

Rule_situation_attributesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_situation_attributesContext.prototype.constructor = Rule_situation_attributesContext;

Rule_situation_attributesContext.prototype.rule_situation_attribute_name = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Rule_situation_attribute_nameContext);
    } else {
        return this.getTypedRuleContext(Rule_situation_attribute_nameContext,i);
    }
};

Rule_situation_attributesContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CdqlParser.COMMA);
    } else {
        return this.getToken(CdqlParser.COMMA, i);
    }
};


Rule_situation_attributesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_situation_attributes(this);
	}
};

Rule_situation_attributesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_situation_attributes(this);
	}
};

Rule_situation_attributesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_situation_attributes(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_situation_attributesContext = Rule_situation_attributesContext;

CdqlParser.prototype.rule_situation_attributes = function() {

    var localctx = new Rule_situation_attributesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, CdqlParser.RULE_rule_situation_attributes);
    var _la = 0; // Token type
    try {
        this.state = 649;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CdqlParser.ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 638;
            this.rule_situation_attribute_name();
            break;
        case CdqlParser.T__7:
            this.enterOuterAlt(localctx, 2);
            this.state = 639;
            this.match(CdqlParser.T__7);
            this.state = 640;
            this.rule_situation_attribute_name();
            this.state = 643; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 641;
                this.match(CdqlParser.COMMA);
                this.state = 642;
                this.rule_situation_attribute_name();
                this.state = 645; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===CdqlParser.COMMA);
            this.state = 647;
            this.match(CdqlParser.T__8);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_situation_attribute_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_situation_attribute_name;
    return this;
}

Rule_situation_attribute_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_situation_attribute_nameContext.prototype.constructor = Rule_situation_attribute_nameContext;

Rule_situation_attribute_nameContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CdqlParser.ID);
    } else {
        return this.getToken(CdqlParser.ID, i);
    }
};


Rule_situation_attribute_nameContext.prototype.DOT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CdqlParser.DOT);
    } else {
        return this.getToken(CdqlParser.DOT, i);
    }
};


Rule_situation_attribute_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_situation_attribute_name(this);
	}
};

Rule_situation_attribute_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_situation_attribute_name(this);
	}
};

Rule_situation_attribute_nameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_situation_attribute_name(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_situation_attribute_nameContext = Rule_situation_attribute_nameContext;

CdqlParser.prototype.rule_situation_attribute_name = function() {

    var localctx = new Rule_situation_attribute_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, CdqlParser.RULE_rule_situation_attribute_name);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 651;
        this.match(CdqlParser.ID);
        this.state = 656;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CdqlParser.DOT) {
            this.state = 652;
            this.match(CdqlParser.DOT);
            this.state = 653;
            this.match(CdqlParser.ID);
            this.state = 658;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Situation_pair_valuesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_situation_pair_values;
    return this;
}

Situation_pair_valuesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Situation_pair_valuesContext.prototype.constructor = Situation_pair_valuesContext;

Situation_pair_valuesContext.prototype.situation_range_values = function() {
    return this.getTypedRuleContext(Situation_range_valuesContext,0);
};

Situation_pair_valuesContext.prototype.COMMA = function() {
    return this.getToken(CdqlParser.COMMA, 0);
};

Situation_pair_valuesContext.prototype.situation_weight = function() {
    return this.getTypedRuleContext(Situation_weightContext,0);
};

Situation_pair_valuesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterSituation_pair_values(this);
	}
};

Situation_pair_valuesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitSituation_pair_values(this);
	}
};

Situation_pair_valuesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitSituation_pair_values(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Situation_pair_valuesContext = Situation_pair_valuesContext;

CdqlParser.prototype.situation_pair_values = function() {

    var localctx = new Situation_pair_valuesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, CdqlParser.RULE_situation_pair_values);
    try {
        this.state = 667;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CdqlParser.T__10:
            this.enterOuterAlt(localctx, 1);
            this.state = 659;
            this.situation_range_values();
            this.state = 660;
            this.match(CdqlParser.COMMA);
            this.state = 661;
            this.situation_weight();
            break;
        case CdqlParser.T__9:
            this.enterOuterAlt(localctx, 2);
            this.state = 663;
            this.situation_weight();
            this.state = 664;
            this.match(CdqlParser.COMMA);
            this.state = 665;
            this.situation_range_values();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Situation_weightContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_situation_weight;
    return this;
}

Situation_weightContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Situation_weightContext.prototype.constructor = Situation_weightContext;

Situation_weightContext.prototype.COLON = function() {
    return this.getToken(CdqlParser.COLON, 0);
};

Situation_weightContext.prototype.NUMBER = function() {
    return this.getToken(CdqlParser.NUMBER, 0);
};

Situation_weightContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterSituation_weight(this);
	}
};

Situation_weightContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitSituation_weight(this);
	}
};

Situation_weightContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitSituation_weight(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Situation_weightContext = Situation_weightContext;

CdqlParser.prototype.situation_weight = function() {

    var localctx = new Situation_weightContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, CdqlParser.RULE_situation_weight);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 669;
        this.match(CdqlParser.T__9);
        this.state = 670;
        this.match(CdqlParser.COLON);
        this.state = 671;
        this.match(CdqlParser.NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Situation_range_valuesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_situation_range_values;
    return this;
}

Situation_range_valuesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Situation_range_valuesContext.prototype.constructor = Situation_range_valuesContext;

Situation_range_valuesContext.prototype.COLON = function() {
    return this.getToken(CdqlParser.COLON, 0);
};

Situation_range_valuesContext.prototype.situation_pair_values_item = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Situation_pair_values_itemContext);
    } else {
        return this.getTypedRuleContext(Situation_pair_values_itemContext,i);
    }
};

Situation_range_valuesContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CdqlParser.COMMA);
    } else {
        return this.getToken(CdqlParser.COMMA, i);
    }
};


Situation_range_valuesContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterSituation_range_values(this);
	}
};

Situation_range_valuesContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitSituation_range_values(this);
	}
};

Situation_range_valuesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitSituation_range_values(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Situation_range_valuesContext = Situation_range_valuesContext;

CdqlParser.prototype.situation_range_values = function() {

    var localctx = new Situation_range_valuesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, CdqlParser.RULE_situation_range_values);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 673;
        this.match(CdqlParser.T__10);
        this.state = 674;
        this.match(CdqlParser.COLON);
        this.state = 675;
        this.match(CdqlParser.T__7);
        this.state = 676;
        this.situation_pair_values_item();
        this.state = 681;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CdqlParser.COMMA) {
            this.state = 677;
            this.match(CdqlParser.COMMA);
            this.state = 678;
            this.situation_pair_values_item();
            this.state = 683;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 684;
        this.match(CdqlParser.T__8);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Situation_pair_values_itemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_situation_pair_values_item;
    return this;
}

Situation_pair_values_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Situation_pair_values_itemContext.prototype.constructor = Situation_pair_values_itemContext;

Situation_pair_values_itemContext.prototype.rule_situation_belief = function() {
    return this.getTypedRuleContext(Rule_situation_beliefContext,0);
};

Situation_pair_values_itemContext.prototype.COMMA = function() {
    return this.getToken(CdqlParser.COMMA, 0);
};

Situation_pair_values_itemContext.prototype.rule_situation_value = function() {
    return this.getTypedRuleContext(Rule_situation_valueContext,0);
};

Situation_pair_values_itemContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterSituation_pair_values_item(this);
	}
};

Situation_pair_values_itemContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitSituation_pair_values_item(this);
	}
};

Situation_pair_values_itemContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitSituation_pair_values_item(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Situation_pair_values_itemContext = Situation_pair_values_itemContext;

CdqlParser.prototype.situation_pair_values_item = function() {

    var localctx = new Situation_pair_values_itemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, CdqlParser.RULE_situation_pair_values_item);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 686;
        this.match(CdqlParser.T__5);
        this.state = 695;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CdqlParser.T__11:
            this.state = 687;
            this.rule_situation_belief();
            this.state = 688;
            this.match(CdqlParser.COMMA);
            this.state = 689;
            this.rule_situation_value();
            break;
        case CdqlParser.T__12:
            this.state = 691;
            this.rule_situation_value();
            this.state = 692;
            this.match(CdqlParser.COMMA);
            this.state = 693;
            this.rule_situation_belief();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 697;
        this.match(CdqlParser.T__6);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_situation_beliefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_situation_belief;
    return this;
}

Rule_situation_beliefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_situation_beliefContext.prototype.constructor = Rule_situation_beliefContext;

Rule_situation_beliefContext.prototype.COLON = function() {
    return this.getToken(CdqlParser.COLON, 0);
};

Rule_situation_beliefContext.prototype.NUMBER = function() {
    return this.getToken(CdqlParser.NUMBER, 0);
};

Rule_situation_beliefContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_situation_belief(this);
	}
};

Rule_situation_beliefContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_situation_belief(this);
	}
};

Rule_situation_beliefContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_situation_belief(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_situation_beliefContext = Rule_situation_beliefContext;

CdqlParser.prototype.rule_situation_belief = function() {

    var localctx = new Rule_situation_beliefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, CdqlParser.RULE_rule_situation_belief);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 699;
        this.match(CdqlParser.T__11);
        this.state = 700;
        this.match(CdqlParser.COLON);
        this.state = 701;
        this.match(CdqlParser.NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_situation_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_situation_value;
    return this;
}

Rule_situation_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_situation_valueContext.prototype.constructor = Rule_situation_valueContext;

Rule_situation_valueContext.prototype.COLON = function() {
    return this.getToken(CdqlParser.COLON, 0);
};

Rule_situation_valueContext.prototype.rule_region_value = function() {
    return this.getTypedRuleContext(Rule_region_valueContext,0);
};

Rule_situation_valueContext.prototype.rule_discrete_value = function() {
    return this.getTypedRuleContext(Rule_discrete_valueContext,0);
};

Rule_situation_valueContext.prototype.discrete_value = function() {
    return this.getTypedRuleContext(Discrete_valueContext,0);
};

Rule_situation_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_situation_value(this);
	}
};

Rule_situation_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_situation_value(this);
	}
};

Rule_situation_valueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_situation_value(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_situation_valueContext = Rule_situation_valueContext;

CdqlParser.prototype.rule_situation_value = function() {

    var localctx = new Rule_situation_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, CdqlParser.RULE_rule_situation_value);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 703;
        this.match(CdqlParser.T__12);
        this.state = 704;
        this.match(CdqlParser.COLON);
        this.state = 708;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
        switch(la_) {
        case 1:
            this.state = 705;
            this.rule_region_value();
            break;

        case 2:
            this.state = 706;
            this.rule_discrete_value();
            break;

        case 3:
            this.state = 707;
            this.discrete_value();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_discrete_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_discrete_value;
    return this;
}

Rule_discrete_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_discrete_valueContext.prototype.constructor = Rule_discrete_valueContext;

Rule_discrete_valueContext.prototype.discrete_value = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Discrete_valueContext);
    } else {
        return this.getTypedRuleContext(Discrete_valueContext,i);
    }
};

Rule_discrete_valueContext.prototype.COLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CdqlParser.COLON);
    } else {
        return this.getToken(CdqlParser.COLON, i);
    }
};


Rule_discrete_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_discrete_value(this);
	}
};

Rule_discrete_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_discrete_value(this);
	}
};

Rule_discrete_valueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_discrete_value(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_discrete_valueContext = Rule_discrete_valueContext;

CdqlParser.prototype.rule_discrete_value = function() {

    var localctx = new Rule_discrete_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, CdqlParser.RULE_rule_discrete_value);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 710;
        this.match(CdqlParser.T__7);
        this.state = 711;
        this.discrete_value();
        this.state = 716;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CdqlParser.COLON) {
            this.state = 712;
            this.match(CdqlParser.COLON);
            this.state = 713;
            this.discrete_value();
            this.state = 718;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 719;
        this.match(CdqlParser.T__8);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Discrete_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_discrete_value;
    return this;
}

Discrete_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Discrete_valueContext.prototype.constructor = Discrete_valueContext;

Discrete_valueContext.prototype.json = function() {
    return this.getTypedRuleContext(JsonContext,0);
};

Discrete_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterDiscrete_value(this);
	}
};

Discrete_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitDiscrete_value(this);
	}
};

Discrete_valueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitDiscrete_value(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Discrete_valueContext = Discrete_valueContext;

CdqlParser.prototype.discrete_value = function() {

    var localctx = new Discrete_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, CdqlParser.RULE_discrete_value);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 721;
        this.json();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_region_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_region_value;
    return this;
}

Rule_region_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_region_valueContext.prototype.constructor = Rule_region_valueContext;

Rule_region_valueContext.prototype.region_value_inclusive = function() {
    return this.getTypedRuleContext(Region_value_inclusiveContext,0);
};

Rule_region_valueContext.prototype.region_value_left_inclusive = function() {
    return this.getTypedRuleContext(Region_value_left_inclusiveContext,0);
};

Rule_region_valueContext.prototype.region_value_right_inclusive = function() {
    return this.getTypedRuleContext(Region_value_right_inclusiveContext,0);
};

Rule_region_valueContext.prototype.region_value_exclusive = function() {
    return this.getTypedRuleContext(Region_value_exclusiveContext,0);
};

Rule_region_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_region_value(this);
	}
};

Rule_region_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_region_value(this);
	}
};

Rule_region_valueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_region_value(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_region_valueContext = Rule_region_valueContext;

CdqlParser.prototype.rule_region_value = function() {

    var localctx = new Rule_region_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, CdqlParser.RULE_rule_region_value);
    try {
        this.state = 727;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 723;
            this.region_value_inclusive();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 724;
            this.region_value_left_inclusive();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 725;
            this.region_value_right_inclusive();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 726;
            this.region_value_exclusive();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Region_value_inclusiveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_region_value_inclusive;
    return this;
}

Region_value_inclusiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Region_value_inclusiveContext.prototype.constructor = Region_value_inclusiveContext;

Region_value_inclusiveContext.prototype.region_value_value = function() {
    return this.getTypedRuleContext(Region_value_valueContext,0);
};

Region_value_inclusiveContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRegion_value_inclusive(this);
	}
};

Region_value_inclusiveContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRegion_value_inclusive(this);
	}
};

Region_value_inclusiveContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRegion_value_inclusive(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Region_value_inclusiveContext = Region_value_inclusiveContext;

CdqlParser.prototype.region_value_inclusive = function() {

    var localctx = new Region_value_inclusiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, CdqlParser.RULE_region_value_inclusive);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 729;
        this.match(CdqlParser.T__7);
        this.state = 730;
        this.region_value_value();
        this.state = 731;
        this.match(CdqlParser.T__8);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Region_value_left_inclusiveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_region_value_left_inclusive;
    return this;
}

Region_value_left_inclusiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Region_value_left_inclusiveContext.prototype.constructor = Region_value_left_inclusiveContext;

Region_value_left_inclusiveContext.prototype.region_value_value = function() {
    return this.getTypedRuleContext(Region_value_valueContext,0);
};

Region_value_left_inclusiveContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRegion_value_left_inclusive(this);
	}
};

Region_value_left_inclusiveContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRegion_value_left_inclusive(this);
	}
};

Region_value_left_inclusiveContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRegion_value_left_inclusive(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Region_value_left_inclusiveContext = Region_value_left_inclusiveContext;

CdqlParser.prototype.region_value_left_inclusive = function() {

    var localctx = new Region_value_left_inclusiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, CdqlParser.RULE_region_value_left_inclusive);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 733;
        this.match(CdqlParser.T__7);
        this.state = 734;
        this.region_value_value();
        this.state = 735;
        this.match(CdqlParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Region_value_right_inclusiveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_region_value_right_inclusive;
    return this;
}

Region_value_right_inclusiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Region_value_right_inclusiveContext.prototype.constructor = Region_value_right_inclusiveContext;

Region_value_right_inclusiveContext.prototype.region_value_value = function() {
    return this.getTypedRuleContext(Region_value_valueContext,0);
};

Region_value_right_inclusiveContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRegion_value_right_inclusive(this);
	}
};

Region_value_right_inclusiveContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRegion_value_right_inclusive(this);
	}
};

Region_value_right_inclusiveContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRegion_value_right_inclusive(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Region_value_right_inclusiveContext = Region_value_right_inclusiveContext;

CdqlParser.prototype.region_value_right_inclusive = function() {

    var localctx = new Region_value_right_inclusiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, CdqlParser.RULE_region_value_right_inclusive);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 737;
        this.match(CdqlParser.LPAREN);
        this.state = 738;
        this.region_value_value();
        this.state = 739;
        this.match(CdqlParser.T__8);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Region_value_exclusiveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_region_value_exclusive;
    return this;
}

Region_value_exclusiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Region_value_exclusiveContext.prototype.constructor = Region_value_exclusiveContext;

Region_value_exclusiveContext.prototype.region_value_value = function() {
    return this.getTypedRuleContext(Region_value_valueContext,0);
};

Region_value_exclusiveContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRegion_value_exclusive(this);
	}
};

Region_value_exclusiveContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRegion_value_exclusive(this);
	}
};

Region_value_exclusiveContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRegion_value_exclusive(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Region_value_exclusiveContext = Region_value_exclusiveContext;

CdqlParser.prototype.region_value_exclusive = function() {

    var localctx = new Region_value_exclusiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, CdqlParser.RULE_region_value_exclusive);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 741;
        this.match(CdqlParser.LPAREN);
        this.state = 742;
        this.region_value_value();
        this.state = 743;
        this.match(CdqlParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Region_value_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_region_value_value;
    return this;
}

Region_value_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Region_value_valueContext.prototype.constructor = Region_value_valueContext;

Region_value_valueContext.prototype.NUMBER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CdqlParser.NUMBER);
    } else {
        return this.getToken(CdqlParser.NUMBER, i);
    }
};


Region_value_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRegion_value_value(this);
	}
};

Region_value_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRegion_value_value(this);
	}
};

Region_value_valueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRegion_value_value(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Region_value_valueContext = Region_value_valueContext;

CdqlParser.prototype.region_value_value = function() {

    var localctx = new Region_value_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, CdqlParser.RULE_region_value_value);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 745;
        this.match(CdqlParser.NUMBER);
        this.state = 746;
        this.match(CdqlParser.T__13);
        this.state = 747;
        this.match(CdqlParser.NUMBER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_entity_idContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_entity_id;
    return this;
}

Rule_entity_idContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_entity_idContext.prototype.constructor = Rule_entity_idContext;

Rule_entity_idContext.prototype.ID = function() {
    return this.getToken(CdqlParser.ID, 0);
};

Rule_entity_idContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_entity_id(this);
	}
};

Rule_entity_idContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_entity_id(this);
	}
};

Rule_entity_idContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_entity_id(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_entity_idContext = Rule_entity_idContext;

CdqlParser.prototype.rule_entity_id = function() {

    var localctx = new Rule_entity_idContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, CdqlParser.RULE_rule_entity_id);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 749;
        this.match(CdqlParser.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_function_idContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_function_id;
    return this;
}

Rule_function_idContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_function_idContext.prototype.constructor = Rule_function_idContext;

Rule_function_idContext.prototype.ID = function() {
    return this.getToken(CdqlParser.ID, 0);
};

Rule_function_idContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_function_id(this);
	}
};

Rule_function_idContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_function_id(this);
	}
};

Rule_function_idContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_function_id(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_function_idContext = Rule_function_idContext;

CdqlParser.prototype.rule_function_id = function() {

    var localctx = new Rule_function_idContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, CdqlParser.RULE_rule_function_id);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 751;
        this.match(CdqlParser.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Rule_urlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_rule_url;
    return this;
}

Rule_urlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rule_urlContext.prototype.constructor = Rule_urlContext;

Rule_urlContext.prototype.authority = function() {
    return this.getTypedRuleContext(AuthorityContext,0);
};

Rule_urlContext.prototype.host = function() {
    return this.getTypedRuleContext(HostContext,0);
};

Rule_urlContext.prototype.port = function() {
    return this.getTypedRuleContext(PortContext,0);
};

Rule_urlContext.prototype.path = function() {
    return this.getTypedRuleContext(PathContext,0);
};

Rule_urlContext.prototype.search = function() {
    return this.getTypedRuleContext(SearchContext,0);
};

Rule_urlContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterRule_url(this);
	}
};

Rule_urlContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitRule_url(this);
	}
};

Rule_urlContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitRule_url(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Rule_urlContext = Rule_urlContext;

CdqlParser.prototype.rule_url = function() {

    var localctx = new Rule_urlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, CdqlParser.RULE_rule_url);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 753;
        this.authority();
        this.state = 754;
        this.match(CdqlParser.T__14);
        this.state = 755;
        this.host();
        this.state = 758;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CdqlParser.COLON) {
            this.state = 756;
            this.match(CdqlParser.COLON);
            this.state = 757;
            this.port();
        }

        this.state = 762;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CdqlParser.FSLASH) {
            this.state = 760;
            this.match(CdqlParser.FSLASH);
            this.state = 761;
            this.path();
        }

        this.state = 766;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CdqlParser.T__15) {
            this.state = 764;
            this.match(CdqlParser.T__15);
            this.state = 765;
            this.search();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AuthorityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_authority;
    return this;
}

AuthorityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AuthorityContext.prototype.constructor = AuthorityContext;

AuthorityContext.prototype.ID = function() {
    return this.getToken(CdqlParser.ID, 0);
};

AuthorityContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterAuthority(this);
	}
};

AuthorityContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitAuthority(this);
	}
};

AuthorityContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitAuthority(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.AuthorityContext = AuthorityContext;

CdqlParser.prototype.authority = function() {

    var localctx = new AuthorityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, CdqlParser.RULE_authority);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 768;
        this.match(CdqlParser.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HostContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_host;
    return this;
}

HostContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HostContext.prototype.constructor = HostContext;

HostContext.prototype.hostname = function() {
    return this.getTypedRuleContext(HostnameContext,0);
};

HostContext.prototype.hostnumber = function() {
    return this.getTypedRuleContext(HostnumberContext,0);
};

HostContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterHost(this);
	}
};

HostContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitHost(this);
	}
};

HostContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitHost(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.HostContext = HostContext;

CdqlParser.prototype.host = function() {

    var localctx = new HostContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, CdqlParser.RULE_host);
    try {
        this.state = 772;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CdqlParser.ID:
            this.enterOuterAlt(localctx, 1);
            this.state = 770;
            this.hostname();
            break;
        case CdqlParser.INT:
            this.enterOuterAlt(localctx, 2);
            this.state = 771;
            this.hostnumber();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HostnameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_hostname;
    return this;
}

HostnameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HostnameContext.prototype.constructor = HostnameContext;

HostnameContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CdqlParser.ID);
    } else {
        return this.getToken(CdqlParser.ID, i);
    }
};


HostnameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterHostname(this);
	}
};

HostnameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitHostname(this);
	}
};

HostnameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitHostname(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.HostnameContext = HostnameContext;

CdqlParser.prototype.hostname = function() {

    var localctx = new HostnameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, CdqlParser.RULE_hostname);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 774;
        this.match(CdqlParser.ID);
        this.state = 779;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CdqlParser.DOT) {
            this.state = 775;
            this.match(CdqlParser.DOT);
            this.state = 776;
            this.match(CdqlParser.ID);
            this.state = 781;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HostnumberContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_hostnumber;
    return this;
}

HostnumberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HostnumberContext.prototype.constructor = HostnumberContext;

HostnumberContext.prototype.INT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CdqlParser.INT);
    } else {
        return this.getToken(CdqlParser.INT, i);
    }
};


HostnumberContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterHostnumber(this);
	}
};

HostnumberContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitHostnumber(this);
	}
};

HostnumberContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitHostnumber(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.HostnumberContext = HostnumberContext;

CdqlParser.prototype.hostnumber = function() {

    var localctx = new HostnumberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, CdqlParser.RULE_hostnumber);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 782;
        this.match(CdqlParser.INT);
        this.state = 783;
        this.match(CdqlParser.DOT);
        this.state = 784;
        this.match(CdqlParser.INT);
        this.state = 785;
        this.match(CdqlParser.DOT);
        this.state = 786;
        this.match(CdqlParser.INT);
        this.state = 787;
        this.match(CdqlParser.DOT);
        this.state = 788;
        this.match(CdqlParser.INT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SearchContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_search;
    return this;
}

SearchContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SearchContext.prototype.constructor = SearchContext;

SearchContext.prototype.searchparameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SearchparameterContext);
    } else {
        return this.getTypedRuleContext(SearchparameterContext,i);
    }
};

SearchContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterSearch(this);
	}
};

SearchContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitSearch(this);
	}
};

SearchContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitSearch(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.SearchContext = SearchContext;

CdqlParser.prototype.search = function() {

    var localctx = new SearchContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, CdqlParser.RULE_search);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 790;
        this.searchparameter();
        this.state = 795;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CdqlParser.T__16) {
            this.state = 791;
            this.match(CdqlParser.T__16);
            this.state = 792;
            this.searchparameter();
            this.state = 797;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SearchparameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_searchparameter;
    return this;
}

SearchparameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SearchparameterContext.prototype.constructor = SearchparameterContext;

SearchparameterContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CdqlParser.ID);
    } else {
        return this.getToken(CdqlParser.ID, i);
    }
};


SearchparameterContext.prototype.INT = function() {
    return this.getToken(CdqlParser.INT, 0);
};

SearchparameterContext.prototype.HEX = function() {
    return this.getToken(CdqlParser.HEX, 0);
};

SearchparameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterSearchparameter(this);
	}
};

SearchparameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitSearchparameter(this);
	}
};

SearchparameterContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitSearchparameter(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.SearchparameterContext = SearchparameterContext;

CdqlParser.prototype.searchparameter = function() {

    var localctx = new SearchparameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, CdqlParser.RULE_searchparameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 798;
        this.match(CdqlParser.ID);
        this.state = 801;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CdqlParser.EQ) {
            this.state = 799;
            this.match(CdqlParser.EQ);
            this.state = 800;
            _la = this._input.LA(1);
            if(!(((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (CdqlParser.ID - 79)) | (1 << (CdqlParser.INT - 79)) | (1 << (CdqlParser.HEX - 79)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PortContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_port;
    return this;
}

PortContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PortContext.prototype.constructor = PortContext;

PortContext.prototype.INT = function() {
    return this.getToken(CdqlParser.INT, 0);
};

PortContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterPort(this);
	}
};

PortContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitPort(this);
	}
};

PortContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitPort(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.PortContext = PortContext;

CdqlParser.prototype.port = function() {

    var localctx = new PortContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, CdqlParser.RULE_port);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 803;
        this.match(CdqlParser.INT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_path;
    return this;
}

PathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PathContext.prototype.constructor = PathContext;

PathContext.prototype.normal_path = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Normal_pathContext);
    } else {
        return this.getTypedRuleContext(Normal_pathContext,i);
    }
};

PathContext.prototype.path_param = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Path_paramContext);
    } else {
        return this.getTypedRuleContext(Path_paramContext,i);
    }
};

PathContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterPath(this);
	}
};

PathContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitPath(this);
	}
};

PathContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitPath(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.PathContext = PathContext;

CdqlParser.prototype.path = function() {

    var localctx = new PathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, CdqlParser.RULE_path);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 807;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CdqlParser.ID:
            this.state = 805;
            this.normal_path();
            break;
        case CdqlParser.T__5:
            this.state = 806;
            this.path_param();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 816;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===CdqlParser.FSLASH) {
            this.state = 809;
            this.match(CdqlParser.FSLASH);
            this.state = 812;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case CdqlParser.ID:
                this.state = 810;
                this.normal_path();
                break;
            case CdqlParser.T__5:
                this.state = 811;
                this.path_param();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 818;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Normal_pathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_normal_path;
    return this;
}

Normal_pathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Normal_pathContext.prototype.constructor = Normal_pathContext;

Normal_pathContext.prototype.ID = function() {
    return this.getToken(CdqlParser.ID, 0);
};

Normal_pathContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterNormal_path(this);
	}
};

Normal_pathContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitNormal_path(this);
	}
};

Normal_pathContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitNormal_path(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Normal_pathContext = Normal_pathContext;

CdqlParser.prototype.normal_path = function() {

    var localctx = new Normal_pathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, CdqlParser.RULE_normal_path);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 819;
        this.match(CdqlParser.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Path_paramContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_path_param;
    return this;
}

Path_paramContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Path_paramContext.prototype.constructor = Path_paramContext;

Path_paramContext.prototype.ID = function() {
    return this.getToken(CdqlParser.ID, 0);
};

Path_paramContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterPath_param(this);
	}
};

Path_paramContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitPath_param(this);
	}
};

Path_paramContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitPath_param(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.Path_paramContext = Path_paramContext;

CdqlParser.prototype.path_param = function() {

    var localctx = new Path_paramContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, CdqlParser.RULE_path_param);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 821;
        this.match(CdqlParser.T__5);
        this.state = 822;
        this.match(CdqlParser.ID);
        this.state = 823;
        this.match(CdqlParser.T__6);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function JsonContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_json;
    return this;
}

JsonContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JsonContext.prototype.constructor = JsonContext;

JsonContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

JsonContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterJson(this);
	}
};

JsonContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitJson(this);
	}
};

JsonContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitJson(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.JsonContext = JsonContext;

CdqlParser.prototype.json = function() {

    var localctx = new JsonContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, CdqlParser.RULE_json);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 825;
        this.value();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ObjContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_obj;
    return this;
}

ObjContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjContext.prototype.constructor = ObjContext;

ObjContext.prototype.pair = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PairContext);
    } else {
        return this.getTypedRuleContext(PairContext,i);
    }
};

ObjContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterObj(this);
	}
};

ObjContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitObj(this);
	}
};

ObjContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitObj(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.ObjContext = ObjContext;

CdqlParser.prototype.obj = function() {

    var localctx = new ObjContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, CdqlParser.RULE_obj);
    var _la = 0; // Token type
    try {
        this.state = 840;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 827;
            this.match(CdqlParser.T__5);
            this.state = 828;
            this.pair();
            this.state = 833;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CdqlParser.COMMA) {
                this.state = 829;
                this.match(CdqlParser.COMMA);
                this.state = 830;
                this.pair();
                this.state = 835;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 836;
            this.match(CdqlParser.T__6);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 838;
            this.match(CdqlParser.T__5);
            this.state = 839;
            this.match(CdqlParser.T__6);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PairContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_pair;
    return this;
}

PairContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PairContext.prototype.constructor = PairContext;

PairContext.prototype.STRING = function() {
    return this.getToken(CdqlParser.STRING, 0);
};

PairContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};

PairContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterPair(this);
	}
};

PairContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitPair(this);
	}
};

PairContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitPair(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.PairContext = PairContext;

CdqlParser.prototype.pair = function() {

    var localctx = new PairContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, CdqlParser.RULE_pair);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 842;
        this.match(CdqlParser.STRING);
        this.state = 843;
        this.match(CdqlParser.COLON);
        this.state = 844;
        this.value();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_array;
    return this;
}

ArrayContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayContext.prototype.constructor = ArrayContext;

ArrayContext.prototype.value = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueContext);
    } else {
        return this.getTypedRuleContext(ValueContext,i);
    }
};

ArrayContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterArray(this);
	}
};

ArrayContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitArray(this);
	}
};

ArrayContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitArray(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.ArrayContext = ArrayContext;

CdqlParser.prototype.array = function() {

    var localctx = new ArrayContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, CdqlParser.RULE_array);
    try {
        this.state = 859;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 846;
            this.match(CdqlParser.T__7);
            this.state = 847;
            this.value();
            this.state = 852;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,67,this._ctx)
            while(_alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1+1) {
                    this.state = 848;
                    this.match(CdqlParser.COMMA);
                    this.state = 849;
                    this.value(); 
                }
                this.state = 854;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,67,this._ctx);
            }

            this.state = 855;
            this.match(CdqlParser.T__8);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 857;
            this.match(CdqlParser.T__7);
            this.state = 858;
            this.match(CdqlParser.T__8);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CdqlParser.RULE_value;
    return this;
}

ValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueContext.prototype.constructor = ValueContext;

ValueContext.prototype.STRING = function() {
    return this.getToken(CdqlParser.STRING, 0);
};

ValueContext.prototype.NUMBER = function() {
    return this.getToken(CdqlParser.NUMBER, 0);
};

ValueContext.prototype.obj = function() {
    return this.getTypedRuleContext(ObjContext,0);
};

ValueContext.prototype.array = function() {
    return this.getTypedRuleContext(ArrayContext,0);
};

ValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.enterValue(this);
	}
};

ValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof CdqlListener ) {
        listener.exitValue(this);
	}
};

ValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof CdqlVisitor ) {
        return visitor.visitValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




CdqlParser.ValueContext = ValueContext;

CdqlParser.prototype.value = function() {

    var localctx = new ValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, CdqlParser.RULE_value);
    try {
        this.state = 868;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CdqlParser.STRING:
            this.enterOuterAlt(localctx, 1);
            this.state = 861;
            this.match(CdqlParser.STRING);
            break;
        case CdqlParser.NUMBER:
            this.enterOuterAlt(localctx, 2);
            this.state = 862;
            this.match(CdqlParser.NUMBER);
            break;
        case CdqlParser.T__5:
            this.enterOuterAlt(localctx, 3);
            this.state = 863;
            this.obj();
            break;
        case CdqlParser.T__7:
            this.enterOuterAlt(localctx, 4);
            this.state = 864;
            this.array();
            break;
        case CdqlParser.T__17:
            this.enterOuterAlt(localctx, 5);
            this.state = 865;
            this.match(CdqlParser.T__17);
            break;
        case CdqlParser.T__18:
            this.enterOuterAlt(localctx, 6);
            this.state = 866;
            this.match(CdqlParser.T__18);
            break;
        case CdqlParser.NULL:
            this.enterOuterAlt(localctx, 7);
            this.state = 867;
            this.match(CdqlParser.NULL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


CdqlParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 41:
			return this.rule_Condition_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

CdqlParser.prototype.rule_Condition_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 3);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.CdqlParser = CdqlParser;
