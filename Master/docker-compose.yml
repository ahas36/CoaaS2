version: "3.2"
services:
    casm:
        image: shakthiw/casm:latest
        container_name: "casm"
        ports:
          - "8070:8080"
          - "4838:4848"
          - "8171:8181"
        environment:
            - CQE_BROKER=cqe
        links:
            - cqc:cqc
            - svm:svm
        depends_on:
            - svm
            - cqc
        restart: always

    cre:
        image: shakthiw/cre:latest
        container_name: "cre"
        ports:
          - "8583"
          - "8008:8008"
        restart: always

    svm:
        image: shakthiw/svm:latest
        container_name: "svm"
        ports:
          - "9191"
          - "8004:8004"
        restart: always
        links:
            - fuseki:fuseki
        depends_on:
            - fuseki

    csi:
        image: shakthiw/csi:latest
        container_name: "csi"
        ports:
          - "8582"
          - "8002:8002"
        restart: always
        links:
            - postgres:postgres
            - sqem:sqem
        depends_on:
            - postgres
            - sqem

    cqp:
        image: shakthiw/cqp:latest
        container_name: "cqp"
        ports:
          - "8585"
          - "8007:8007"
        restart: always

    cqc:
        image: shakthiw/cqc:latest
        container_name: "cqc"
        ports:
          - "8484"
          - "8001:8001"
        restart: always
        links:
            - cqp:cqp
            - sqem:sqem
            - csi:csi
        depends_on:
            - cqp
            - sqem
            - csi

    sqem:
        image: shakthiw/sqem:latest
        container_name: "sqem"
        ports:
          - "8686"
          - "8003:8003"
        restart: always
        depends_on:
          - mongodb
          - sqlserver
        links:
          - mongodb
          - sqlserver

    cpree:
      image: shakthiw/cpree:latest
      container_name: "cpree"
      ports:
        - "9292"
        - "8014:8014"
      restart: always
      links:
        - sqem:sqem
        - cqc:cqc
      depends_on:
        - sqem
        - cqc

    cqg:
      image: shakthiw/cqg:latest
      container_name: "cqg"
      depends_on:
        - mongodb
      links:
        - mongodb

    simulator:
      image: shakthiw/simulator:latest
      container_name: "simulator"
      ports:
        - "5000:5000"
      restart: always
      depends_on:
        - mongodb
      links:
        - mongodb

    acoca:
      image: shakthiw/acoca:latest
      container_name: "dashboard"
      ports:
        - "4200"
        - "4200:80"
      restart: always

#    grafana:
#        image: grafana/grafana:5.1.0
#        expose:
#          - "3000"
#        ports:
#          - "3000:3000"
#        environment:
#          - GF_INSTALL_PLUGINS=grafana-simple-json-datasource
#        user: "104"
#        network_mode: "bridge"
#
    mongodb:
        image: mongo:latest
        container_name: "mongodb"
        environment:
          - MONGO_DATA_DIR=/data/db
          - MONGO_LOG_DIR=/dev/null
        volumes:
          #for mac
          - ./data/db:/data/db
          #for windows
          #- /userlogin/pgdata:/var/lib/postgresql/data
        ports:
            - 27017:27017
        command: mongod --logpath=/dev/null # --quiet

    mongo-seed:
        build: ./mongo-seed
        restart: on-failure
        depends_on:
          - mongodb
        links:
          - mongodb

    fuseki:
        container_name: "fuseki"
        image: stain/jena-fuseki
        environment:
          - ADMIN_PASSWORD=admin
          - JVM_ARGS=-Xmx2g
        ports:
         - 27018:3030
        volumes:
         - ./data/jena:/data/jena
#         - /userlogin/jena:/var/lib/jena/data

    postgres:
        image: postgres:12.15
        container_name: "postgres"
        environment:
          - POSTGRES_USER=coaas
          - POSTGRES_PASSWORD=acoca
          - POSTGRES_DB=coaas
        volumes:
          - ./init.sql:/docker-entrypoint-initdb.d/init.sql
          - ./pgdata:/var/lib/postgresql/data
          #for windows
          #- /userlogin/pgdata:/var/lib/postgresql/data
        ports:
            - 5433:5432

    timescale:
      image: timescale/timescaledb-ha:pg14-latest
      container_name: "timescale"
      environment:
        - POSTGRES_USER=coaas
        - POSTGRES_DB=coaas
        - POSTGRES_HOST_AUTH_METHOD=trust
      ports:
        - 5436:5432

    redis:
      container_name: "redis"
      image: redis
      restart: always
      ports:
        - '6379:6379'
      command: redis-server --save 20 1 --loglevel warning
      volumes:
        - redis:/data

    sqlserver:
      container_name: "sqlserver"
      image: mcr.microsoft.com/mssql/server
      restart: always
      environment:
        ACCEPT_EULA: "Y"
        SA_PASSWORD: "coaas@PerfDB2k22"
      ports:
        - '1433:1433'

    # Kafka brokers and IoT stream processing
    zookeeper:
      image: confluentinc/cp-zookeeper:latest
      container_name: "zookeeper"
      environment:
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_TICK_TIME: 2000
      ports:
        - 22181:2181

    kafka:
      image: confluentinc/cp-kafka:latest
      container_name: "kafka"
      depends_on:
        - zookeeper
      ports:
        - 29092:29092
      environment:
        KAFKA_BROKER_ID: 1
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
        KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

volumes:
  redis:
    driver: local